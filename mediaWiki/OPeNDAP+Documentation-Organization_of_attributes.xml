<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.11/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.11/ http://www.mediawiki.org/xml/export-0.11.xsd" version="0.11" xml:lang="en">
  <siteinfo>
    <sitename>OPeNDAP Documentation</sitename>
    <dbname>wikidb</dbname>
    <base>https://docs.opendap.org/index.php/Home</base>
    <generator>MediaWiki 1.38.4</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">OPeNDAP Documentation</namespace>
      <namespace key="5" case="first-letter">OPeNDAP Documentation talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Organization of attributes</title>
    <ns>0</ns>
    <id>305</id>
    <revision>
      <id>7074</id>
      <parentid>2945</parentid>
      <timestamp>2012-02-03T00:03:35Z</timestamp>
      <contributor>
        <username>Jimg</username>
        <id>3</id>
      </contributor>
      <comment>/* More ideas about this syntax */</comment>
      <origin>7074</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="29259" sha1="fpvb7oefpur0nb105gyckv4k7nuxpet" xml:space="preserve">== Background ==

From: benno@iri.columbia.edu&lt;br/&gt;
Subject: DAP 4.0 Schema&lt;br/&gt;
Date: May 12, 2005 8:50:02 AM MDT&lt;br/&gt;
To: dods-tech@unidata.ucar.edu&lt;br/&gt;

My apologies for making these comments so late:  I was trying to monitor the DAP 4.0 progress, but the document I was looking at did not mention the schema, and somehow I missed it when the document got improved.

Essentially DAP 4.0 as it currently stands uses XML to carry an improved dataset with attributes structure not unlike DAP 2.0.  In particular, it defines an attribute cell which has a name and type and contents.   This is awfully close to defining a structure within XML to carry the exact same information that XML is designed to carry (shades of GMT and  netcdf ...).

I was thinking that it would be awfully nice if a set of attributes that belong to a convention (say CF) got translated to a set of XML tags with a CF schema, i.e. the tags would be defined in a namespace CF.   So we would see

 &lt;dataset name=test xmlns:cf="http://unidata.ucar.edu/2005/CF"&gt;
     &lt;cf:title&gt;A wonderful test dataset&lt;/cf:title&gt;
     &lt;cf:institution&gt;the great beyond&lt;/cf:institution&gt;
     &lt;cf:references&gt;dods-tech@unidata.ucar.edu&lt;cf:references&gt;
      ...
 &lt;/dataset&gt;

This way we would truly be using XML to transmit the information.   The implication of this is that we would split the DAP schema into two parts:  a organizational part  (datasets and variables), and a concrete data-typing part (most of the rest of the current DAP4.0 schema).     The DAP core would only use the concrete data-typing part, (except maybe for the nesting of the organizational part to create dot-separated names in the constraints, though in this example that is explicit in the Blob url so perhaps it is not even an issue). 
&lt;pre&gt;
 &lt;variable name=sst&gt;
     &lt;cf:long_name&gt;sea surface temperature&lt;/cf:long_name&gt;
     &lt;cf:units&gt;Celsius_scale&lt;/cf:units&gt;
     &lt;dap:Array&gt;
         &lt;dap:Float32/&gt;
         &lt;dap:dimension size="16" name="latitude"/&gt;
         &lt;dap:dimension size="17" name="longitude"/&gt;
         &lt;dap:dimension size="21" name="time"/&gt;
     &lt;/dap:Array&gt;
     &lt;dap:Blob URL="http://dcz.opendap.org/dap/data/nc/fnoc1.nc?u"/&gt;
 &lt;/variable&gt;
&lt;/pre&gt;
This is only a rough idea -- there are others out there that could make better syntactic choices (like a single dap container that resets the default name space for its contents), I am just trying to make a general point.  
The reason for doing this is two-fold:  1) the core core could be simpler and more stable, because almost everything outside the hopefully small core namespace would not affect the OpenDAP core, and 2) OpenDAP xml could simply be inserted in an XML document following whatever specific metadata conventions and data structures to create a document with accessible data.  (GML perhaps?)  It seems pretty clear that the future is metadata transmission in XML (with many different standards for metadata), and OpenDAP has always been a transmission mechanism that avoided constraining the metadata, it would be really nice to turn over the metadata responsibility to XML.

Benno

----

Added to this wiki: [[User:Jimg|jimg]] 14:06, 24 June 2008 (PDT)

== More ideas about this syntax ==

Some other ideas; a mixture of syntaxes:
&lt;source lang="xml"&gt;
 &lt;variable name="sst"&gt;
     &lt;cf:long_name&gt;sea surface temperature&lt;/cf:long_name&gt;
     &lt;cf:units&gt;Celsius_scale&lt;/cf:units&gt;

     &lt;dap:attribute name="long_name" type="string"&gt;sea surface temperature&lt;/dap:attribute &gt;

     &lt;dap:attribute name="coefs" type="float64"&gt;&lt;value&gt;0.01&lt;/value&gt; &lt;value&gt;-1.5&lt;/value&gt; &lt;/dap:attribute&gt;

     &lt;att:units type="string"&gt;Celsius_scale&lt;/att:units &gt;
     &lt;att:foo type="string"&gt;bar&lt;/att:foo&gt;

     &lt;dap:Array&gt;
         &lt;dap:Float32/&gt;
         &lt;dap:dimension size="16" name="latitude"/&gt;
         &lt;dap:dimension size="17" name="longitude"/&gt;
         &lt;dap:dimension size="21" name="time"/&gt;
     &lt;/dap:Array&gt;
 &lt;/variable&gt;
&lt;/source&gt;

But, the question I would like to understand better is '''How does having an XML document with a potentially infinite number of elements affect systems?''' That is, when we take an attribute from a netcdf file (or any other file type...) and make an element name from the attribute's name, since there's no limit to the names of attributes, there's a potentially infinite numer of element names in the DDX.

Other issues:
# It's possible to have attributes in netcdf (and other?) formats that have colons in their names. That means that when a handler sees these names, it must ''remove the colon'' in order to make that attribute name an element name that's legal XML.
# There are other characters that are not allowed in QNames, and these would all have to be removed for this attribute-name --&gt; element-name scheme to work in general.
# Is it realistic to think that a handler (netcdf or otherwise) is going to be rewritten in such a way that it can distinguish which dap:Attribute@name values that contain colons need to be interpreted as namespace prefixed names vs which ones that contain colons must have their colons removed/changed so that they become a vaild QName? (If you do have modify it how do you accurately store the real name of the element? Add an attribute called "name" to store the Name? At that point we're back to where we were with dap:Attribute)

An alternative is to use the existing DDX syntax but add an optional ''namespace'' attribute which provides the handler with an opportunity to say it knows this attribute belongs to a particular namespace. The handler would have to take care of assigning a prefix for the namespace in many situations - work out the details...

== First Proposed alternative syntax ==

[[User:Jimg|jimg]] 15:26, 17 January 2009 (PST) '''Make sure to read the "second proposed alternative syntax" since that's the one we're going to use. This is here to capture the complete discussion (and because it's what we thougt abut first)'''

''The idea behind all of this is to have the handlers build responses that can include information about the conventions/standards followed by the dataset''

[[User:Jimg|jimg]] 09:57, 14 January 2009 (PST) read this over but also see below where I have a 'Second Proposed Alternative syntax'

=== Discussion ===

The current (DAP 3.2) DDX syntax for attributes looks like:

&lt;pre&gt;
    &lt;Grid name="temp"&gt;
        &lt;Attribute name="long_name" type="String"&gt;
            &lt;value&gt;temperature&lt;/value&gt;
        &lt;/Attribute&gt;
        &lt;Attribute name="units" type="String"&gt;
            &lt;value&gt;K&lt;/value&gt;
        &lt;/Attribute&gt;
        &lt;Attribute name="grid_mapping" type="String"&gt;
            &lt;value&gt;crs&lt;/value&gt;
        &lt;/Attribute&gt;
        &lt;Attribute name="wcs:gridCRS" type="String"&gt;
            &lt;value&gt;crs&lt;/value&gt;
        &lt;/Attribute&gt;
        &lt;Array name="temp"&gt;
        ...
&lt;/pre&gt;

And I'd suggest that we adopt the following addition to that syntax: That the Attribute element support an optional ''namespace'' xml attribute (dap:attribute@namespace) and that xml attribute be used to indicate that a particular dap:attribute belongs to a given convention/standard. Like this:
 &lt;Attribute name="long_name" type="string" nsPrefix="cf"&gt;
 &lt;Attribute name="long_name" type="string" namespace="http://ns.ucar.edu/xml/ns/cf-1.0"&gt;
where we would declare the string "cf" to be a namespace prefix in the usual XML way, or simply use the namespace attribute to inject the full namespace name

Pro:
# This will be possible to implement in our handlers. We will not have to divine new names for data set attributes that contain characters that are not allowed in QNames.
# The dap:attribute@namespace is a bit of a hack, but it's a recognizable one that should provide the needed information to XSLT and other code
# encoding the namespace &amp; its prefix (i.e., "cf" in this example) using the XML notation for such a beast is something that the handler can do and that XSLT and otehr code should also be able to access

Con:
# In order to get the attributes represented in the form where they take on in their namespaces (when attributes are in a namespace; e.g. CF-1.0), we will have to transform the DDX using XSLT.


=== Analysis ===


[[User:Ndp|ndp]] 06:56, 16 January 2009 (PST) I reviewed this, generated some examples, and learned the following:

# XML elements may have XML attributes (possibly associated with a namespace), contain other elements (possibly associated with a namespace) , and text. XML allows multiple elements of the same type at the same level in the hierarchy. This is incompatible with the current semantics of the dap:Attribute container. IN order to encapsulate arbitray XML in dap:Attributes we would need to add 3 new dap:Attribute@type values: xmlElementNode, xmlAttributeNode, and xmlTextNode.
# Even with the addition of these 3 new types the resulting dap:Attributes break the structural rules for dap:Attribute because there will be many cases in which there are multiple dap:Attribute elements with the same @name value at the same level.
# '''dap:Attribute@type='Container' ''' Attempting to map xml elements to dap:Attributes of type Container has the following identified problems:
#* If we don't expressly construct an xmlElementNode dap:Attribute type then we are relying on the presence (or lack thereof) of a @prefix or @namespace attribute in the dap:Attribute element declaration to control the structural interpretation of the dap:Attribute element's content. 
#* Since this mapping injects the XML elements into a subset of possible dap:Attribute Container elements, this means that people could easily construct namespace mapped Attribute containers that were not promotable to XML because their content doesn't follow the semantics of an XML element type.
# '''dap:Attribute@type='String' ''' Attempting to map xml text nodes to dap:Attributes of type String has the following identified problems:
#* If we don't expressly construct an xmlTextNode dap:Attribute type then we are relying on the presence (or lack thereof) of a @prefix or @namespace attribute in a parent dap:Attribute element declaration to control the structural interpretation of the dap:Attribute (@type='String') element's content. IN other words only by looking  the parent can we know if it's a textNode in an XML element.


==== Short example ====
&lt;pre&gt;
            &lt;SpatialDomain xmlns="http://www.opengis.net/wcs/1.1"&gt;
                &lt;ows:BoundingBox gml:crs="urn:ogc:def:crs:EPSG::4326"&gt;
                    &lt;ows:LowerCorner&gt;-97.8839 21.736&lt;/ows:LowerCorner&gt;
                    &lt;ows:UpperCorner&gt;-57.2312 46.4944&lt;/ows:UpperCorner&gt;
                &lt;/ows:BoundingBox&gt;
            &lt;/SpatialDomain&gt;
&lt;/pre&gt;

Becomes:
&lt;pre&gt;
            &lt;dap:Attribute name="SpatialDomain" namespace="http://www.opengis.net/wcs/1.1"
                           type="Container"&gt;
               &lt;dap:Attribute name="BoundingBox" namespace="http://www.opengis.net/ows/1.1" type="Container"&gt;
                  &lt;dap:Attribute name="crs" type="xmlAttributeNode" namespace="http://www.opengis.net/gml/3.2"&gt;
                     &lt;dap:value&gt;urn:ogc:def:crs:EPSG::4326&lt;/dap:value&gt;
                  &lt;/dap:Attribute&gt;
                  &lt;dap:Attribute name="LowerCorner" namespace="http://www.opengis.net/ows/1.1" type="Container"&gt;
                     &lt;dap:Attribute name="textNode" type="String"&gt;
                        &lt;dap:value&gt;-97.8839 21.736&lt;/dap:value&gt;
                     &lt;/dap:Attribute&gt;
                  &lt;/dap:Attribute&gt;
                  &lt;dap:Attribute name="UpperCorner" namespace="http://www.opengis.net/ows/1.1" type="Container"&gt;
                     &lt;dap:Attribute name="textNode" type="String"&gt;
                        &lt;dap:value&gt;-57.2312 46.4944&lt;/dap:value&gt;
                     &lt;/dap:Attribute&gt;
                  &lt;/dap:Attribute&gt;
               &lt;/dap:Attribute&gt;
            &lt;/dap:Attribute&gt;
&lt;/pre&gt;

This adheres to the structural rules of the DAP, but it's interpretation is implicit (?) (I may mean defined by or something) from the presence of the @namespace or @prefix attributes.

===  Examples using this syntax to map WCS XML to DAP attributes and back using XSLT  ===
Both of these examples rely on the use of two new xml attributes for dap:Attribute:
* '''namespace''' - to store the namespace for the xml element.
* '''prefix''' - to store the namespace prefix for the element. (This is probably not very useful in practice given that the XSLT and other API's don't really care about the prefix - just the namespace)
==== [[dap:Attribute Extension Example 1|Example 1]] ====

Here I used a total of six changes to the current DAP Attribute definitions: Three new dap:Attribute types to encapsulate arbitrary XML in dap:Attribute elements, and two new xml attributes for the dap:Attribute element. 
# type=''''xmlElementNode''''
# type=''''xmlAttributeNode''''
# type=''''xmlTextNode''''
# ''''namespace'''' attribute
# ''''prefix'''  attribute
# '''''Must allow multiple dap:Attributes of the same name to be siblings in the document.'''''
However, this mapping can only be 1:1 with a subset of the total dap:Attribute set (and thus never onto). In fact, this transform really maps arbitrary XML to a brand new part of the dap:Attrbute space would not exist without the first five of the six changes above. 

XML to special dap:Attributes: '''[[Dap:Attribute_Extension_Example_1#Source_XML |srcDoc]]'''  -&gt; '''[[Dap:Attribute_Extension_Example_1#Transform|xmlToDapAtt XSLT]]''' -&gt;  '''[[Dap:Attribute_Extension_Example_1#Result|dap:Attributes]]''' 

Special dap:Attributes to XML: '''[[Dap:Attribute_Extension_Example_1#Result|dap:Attributes]]''' -&gt;  '''[[Dap:Attribute_Extension_Example_1#Transform_Back | dapAttToXML XSLT]]''' -&gt;  '''[[Dap:Attribute_Extension_Example_1#Result_2|resultDoc]]'''  (should be same as srcDoc)

[[User:Ndp|ndp]] 09:16, 20 January 2009 (PST) personally I think the result is awful.

==== [[dap:Attribute Extension Example 2|Example 2:]] ====
Here I attempt to encapsulate arbitary XML in the dap by limiting the changes in the dap:Attrubte mode to:
# type=''''xmlAttributeNode''''  for dap:Attribute
# ''''namespace'''' attribute for dap:Attribute
# ''''prefix'''  attribute for dap:Attribute
# '''''Must allow multiple dap:Attributes of the same name to be siblings in the document.'''''

Again mapping can only be 1:1 with a subset of the total dap:Attribute set (and thus never onto). And like the previous example, the transform really maps arbitrary XML to a brand new part of the dap:Attrbute space would not exist without the first 3 changes above. THis is complicated by the fact that in order to encapsulate XML text content this examples relies on context sensitive interpretation of dap:Attributes of type String.

XML to special dap:Attributes: '''[[Dap:Attribute_Extension_Example_2#Source_XML |srcDoc]]'''  -&gt; '''[[Dap:Attribute_Extension_Example_2#Transform_.28_xml_-xslt-.3E_dap.29|xmlToDapAtt XSLT]]''' -&gt;  '''[[Dap:Attribute_Extension_Example_2#Result|dap:Attributes]]''' 

Special dap:Attributes to XML: '''[[Dap:Attribute_Extension_Example_2#Result|dap:Attributes]]''' -&gt;  '''[[Dap:Attribute_Extension_Example_2#Transform_Back_.28dap_-xslt-.3E_xml.29 | dapAttToXML XSLT]]''' -&gt;  '''[[Dap:Attribute_Extension_Example_2#Result_2|resultDoc]]'''  (should be same as srcDoc)

=== Development Plan ===


How to implement this change:
# Adopt this syntax for DAP 3.3
# Modify the DAP to create for "namespace aware" dap:Attribute elements
## Implement new dap:Attribute attributes
##* namepace
##* prefix
## Implement new dap:Attribute type
##* xmlAttributeNode


How this will be used by the WCS interface:
# Use an AIS to inject namespace tagged dap:Attribute elements derived from wcs:CoverageDescription and wcs:CoverageSummary elements. 
# This content WILL be in the DAP attribute namespace
# The consumers of this DDX (the OLFS for now) must be modified to understand the new dap:Attribute syntax and be able to promote the namespace associated attributes to their original XML constructs.
# The OLFS will collect all of the DDX's in the WCS coverage catalog, grab their wcs:CoverageSummary and wcs:CoverageDescription elements and use them to build responses for GetCapabilities and DescribeCoverage requests.
# This leaves the OLFS to parse incoming GetCoverage request and to build data access URL's (or errors!) based on their content.

== Second Proposed Alternative Syntax ==

[[User:Jimg|jimg]] 10:15, 14 January 2009 (PST) OK, I think this idea combines things, let me know what you all think.

[[User:Jimg|jimg]] 16:22, 14 January 2009 (PST) We've chosen this syntax!

We could consider changing the DAP 3.2 DDX to allow any XML element to be present at certain locations in the DDX. These elements might (probably will) be ignored by most DAP-aware code, but they ''will'' be transported by the document. The 'particular place' will be right before any place where an ''Attribute'' element may appear.

The schema change might look like this:

    &lt;xs:complexType name="BaseType"&gt;
        &lt;xs:annotation&gt;
            &lt;xs:documentation&gt;DODS Base Type&lt;/xs:documentation&gt;
        &lt;/xs:annotation&gt;
        &lt;xs:sequence&gt;
            '''&lt;xsd:any namespace="##other" minOccurs="0" maxOccurs="unbounded" processContents="strict"/&gt;'''
            &lt;xs:element ref="Attribute" minOccurs="0" maxOccurs="unbounded"/&gt;
            &lt;xs:element ref="Alias" minOccurs="0" maxOccurs="unbounded"/&gt;
        &lt;/xs:sequence&gt;
        &lt;xs:attribute name="name" type="xs:string"/&gt;
    &lt;/xs:complexType&gt;

Or, we could demand that arbitrary XML be wrapped in a special type of dap:Attribute. The schema change for that might looks like this:

    &lt;xs:complexType name="DASAttribute"&gt;
        &lt;xs:annotation&gt;
            &lt;xs:documentation&gt;DAS Attribute Type&lt;/xs:documentation&gt;
        &lt;/xs:annotation&gt;
        &lt;xs:choice&gt;
            &lt;xs:sequence&gt;
                &lt;xs:element name="value" type="xs:string" maxOccurs="unbounded"/&gt;
            &lt;/xs:sequence&gt;
            &lt;xs:sequence&gt;
                '''&lt;xsd:any namespace="##other" minOccurs="0" maxOccurs="unbounded" processContents="strict"/&gt;'''
                &lt;xs:element ref="Attribute" minOccurs="0" maxOccurs="unbounded"/&gt;
                &lt;xs:element ref="Alias" minOccurs="0" maxOccurs="unbounded"/&gt;
            &lt;/xs:sequence&gt;
        
        &lt;/xs:choice&gt;
        &lt;xs:attribute name="name" type="xs:string" use="required"/&gt;
        &lt;xs:attribute name="type" type="dap2:DataType" use="required"/&gt;
    &lt;/xs:complexType&gt;

[[User:Jimg|jimg]] 09:56, 14 January 2009 (PST) I don't know enough about XML Schema to understand what a document would like if it used this schema. However, '''the important thing''' about wrapping the 'foreign' XML in a DAP Attribute container is that we can use existing tools like NCML to inject that foreign XML without changing NCML much. That's the important thing: Can we do what's proposed without changing or adding to NCML? We will need to tweak NCML just a little to build new DAP Attributes that contain foreign XML, but only a very little. If we want to insert those elements 'naked' then I'll have to move just a bit farther from the current NCML 2.2. In NCML I'll probably actually use the 'add a new attribute' syntax and just overload it with a new XML attribute type like 'xml'.


=== Discussion ===
([[User:Jimg|jimg]] said:) I suggest that we keep the current DDX syntax for attributes since it save us from having to do text processing in the handlers. 

&lt;blockquote&gt;The problem with representing all DAP attributes using a syntax like &lt;att:''attribute name'' ...&gt; is that ''attribute name'' can easily contain characters that are not allowed in what XML calls a QName. This will be a real problem when we apply this representation to data sets which use HDF4 and HDF5. In those you can find examples of attributes with colons and other odd characters. So we'd have to adopt a syntax like &lt;att:''modified attribute name'' real_name="''attribute name''" ...&gt;.&lt;/blockquote&gt;

And that we augment this with the idea that we can inject arbitrary XML into a DDX anyplace we can also have attributes (Nathan, smooth over the rough edges here). This way we can represent WCS info in the short term and we can build handlers that can include elements like &lt;cf:long_name ...&gt; all with out having a schema that requires client to parse/understand a potentially infinite set of elements for DAP. 

An example would look like:
&lt;pre&gt;
&lt;Grid name="temp"&gt;
        &lt;!-- This stuff is what's new. Despite my earlier comments about NCML
             modifications, I can code this w/o much more effort than I can code
             a NCML handler in the first place. And of course the handler would
             use its own knowledge about long_name and units to make the CF elements.
             We'd also need to add the smarts to include the correct xmlns things
             at the start of the document. --&gt; 
        &lt;cf:long_name&gt;temperature&lt;/cf:long_name&gt;
        &lt;cf:units&gt;K&lt;/cf:units&gt;
        &lt;wcs:CoverageDescription&gt;
               ...
        &lt;/wcs:CoverageDescription &gt;
        &lt;wcs:CoverageSummary&gt;
               ...
        &lt;/wcs:CoverageSummary &gt;
        
        &lt;!-- All of the original attributes are here, using the current 
             syntax and a client needs to only grok a finite set of elements 
             to use them with no character content issues we're not currently
             dealing with  --&gt;
        &lt;Attribute name="long_name" type="String"&gt;
            &lt;value&gt;temperature&lt;/value&gt;
        &lt;/Attribute&gt;
        &lt;Attribute name="units" type="String"&gt;
            &lt;value&gt;K&lt;/value&gt;
        &lt;/Attribute&gt;
        &lt;Attribute name="grid_mapping" type="String"&gt;
            &lt;value&gt;crs&lt;/value&gt;
        &lt;/Attribute&gt;
        &lt;Attribute name="wcs:gridCRS" type="String"&gt;
            &lt;value&gt;crs&lt;/value&gt;
        &lt;/Attribute&gt;
        &lt;Array name="temp"&gt;
        ...
&lt;/pre&gt;

=== Analysis ===

[[User:Ndp|ndp]] 16:54, 16 January 2009 (PST) 

I think that operationally this is the better of the two proposed syntaxes.
* We can use XSLT to migrate the foreign XML from the DDX into the RDF representation and keep it bound to it's parent DAP object/element.
* It's easy to filter (using XSLT it may more difficult in another API) to get the stuff you want.


The following examples are based on what would happen if we followed the first schema snippet (and beyond in 

==== [[dap:Attribute Extension Example 3|Example 3]] Embedded Foreign XML as "global" (top-level)  metadata ====

Where we embed an entire wcs:CoverageDescription and wcs:CoverageSummary at the top level of a DDX. This most closely reflected by the first schema snippet above.

==== [[dap:Attribute Extension Example 3b|Example 3b]] Embedded Foreign XML as "global" (top-level)  metadata ====

Where we embed an entire wcs:CoverageDescription and wcs:CoverageSummary at the top level of a DDX. This most closely reflected by the first schema snippet above.

==== [[dap:Attribute Extension Example 4|Example 4]] Allowing foreign XML to encapsulate and be embedded with the DDX elements  ====

Where we mingle WCS content into the DDX document. A more extreme version of Example 4 that looks at not just inclusion  but encapsulation.

==== [[dap:Attribute Extension Example 5|Example 5]] Allowing foreign XML to encapsulate dap:Attribute values (not so good) ====
 
Where we take the "mingling" too far and it breaks.

=== Development Plan ===


How to implement this change:
# Adopt this syntax for DAP 3.3
# Must be clear about how to organize the stuff in the DDX - make a schema or schema snippet that describes where foreign namespace XML can occur in the document.

How this will be used by the WCS interface:
# Use an AIS to inject foreign namespace XML into the DDX 
# This content will not be in the DAP attribute namespace
# The consumers of this mingled DDX (the OLFS for now) can use various XML API's (XSLT, JDOM, etc.) to grab the things they need from the DDX.
# The OLFS will collect all of the DDX's in the WCS coverage catalog, grab their wcs:CoverageSummary and wcs:CoverageDescription elements and use them to build responses for GetCapabilities and DescribeCoverage requests.
# This leaves the OLFS to parse incoming GetCoverage request and to build data access URL's (or errors!) based on their content.

== Other Dap Changes ==
=== dap:Attribute ===

I think we need to rethink the XML representation of dap:Attribute. Right now we have one XML type, da:Attrbute, which has an xml attribute named type that controls the "type" of the dap:Attribute. Each value of "type" implies different semantics, content and possibly different structure for an instance of dap:Attribute. This reflects the Java (and possibly C++) implementations of the DAP.

&lt;blockquote&gt; I think it's a bad thing. [[User:Ndp|ndp]]&lt;/blockquote&gt;
&lt;blockquote&gt;  [[User:Jimg|jimg]] 15:23, 17 January 2009 (PST) Why? &lt;/blockquote&gt;

&lt;blockquote&gt; Well, I don't think it's a bad thing that it mimics the java and C++ implementations. It's a  bad thing that they are in fact different types, and yet we treat them bundle them as a single type whose semantics are a function of the ''type'' attributes value. My thinking is that we should just explicitly represent them as individual types. I think that would improve the XML representation of them. I don't think it means that the C++ or Java implementations need to be re-factored (beyond what it would take to support the different XML representation) [[User:Ndp|ndp]] 21:53, 20 January 2009 (PST)&lt;/blockquote&gt;

Whe should consider make each Attribute type it's own "class":
* '''&lt;AttByte /&gt;''' - Holds a Byte valued Attribute.
* '''&lt;AttInt16 /&gt;''' - Holds a 16 bit integer valued Attribute.
* '''&lt;AttUInt16 /&gt;''' - Holds an unsigned 16 bit integer valued Attribute.
* '''&lt;AttInt32 /&gt;''' - Holds a 32 bit integer valued Attribute.
* '''&lt;AttUInt32 /&gt;''' - Holds an unsigned 32 bit integer valued Attribute.
* '''&lt;AttFloat32 /&gt;''' - Holds a 32 bit floating point valued Attribute.
* '''&lt;AttFloat64 /&gt;''' - Holds a 64 bit floating point valued Attribute.
* '''&lt;AttString /&gt;''' - Holds a String valued Attribute.
* '''&lt;AttURL /&gt;''' - Holds a URL valued Attribute.
* '''&lt;AttContainer /&gt;''' - Holds a Container Attribute.

I think this will make for a much better XML representation. One in which we can more effectively use an XML schema to clearly define the content model. [[User:Jimg|jimg]] 15:23, 17 January 2009 (PST) Again, Why?

Of course, the next logical step is probably to dump the concept of: Attributes all together.

:'''DAP QUESTION: What is the difference between Attributes and DAP variables?'''
:* Is it that Attributes get sent along with the syntactic (structural) metadata description? [[User:Jimg|jimg]] 15:22, 17 January 2009 (PST) Do you mean 'that attribute values get sent along with the syntactic metadata? Ans: No, Attributes are labeled as such because the person who built the dataset labeled some of the information as ''variable'' and some as ''attributes'' where the latter describe the former. Is the distinction arbitrary? Yes, at some level, but by preserving the distinction in DAP we are avoiding loosing it when the dataset is viewed by a remote client. BTW, the Attribute values are ''not'' part of the syntactic metadata in the DAS/DDS, on in the DDX.
:* Is it that they cannot be constrained? [[User:Jimg|jimg]] 15:22, 17 January 2009 (PST) It's true that they cannot be constrained and that the values are present, but the most important distinction is the fidelity of representation; they are attributes in the dataset so they are attributes in the DAP representation of the dataset, too.

In the DDX we end up sending all of the Attributes in the DataDDX. '''Is that really what we want?''' [[User:Jimg|jimg]] 15:40, 17 January 2009 (PST) Yes, I want each of the responses to be complete. I think it's a worthwhile concession to make to transport some information twice.
----
&lt;blockquote&gt;
[[User:Ndp|ndp]] 09:18, 21 January 2009 (PST) &lt;br/&gt;
Another way to look at this might be to simply create another namespace for Attributes.

For example:
* '''&lt;att:Byte /&gt;''' - Holds a Byte valued Attribute.
* '''&lt;att:Int16 /&gt;''' - Holds a 16 bit integer valued Attribute.
* '''&lt;att:UInt16 /&gt;''' - Holds an unsigned 16 bit integer valued Attribute.
* '''&lt;att:Int32 /&gt;''' - Holds a 32 bit integer valued Attribute.
* '''&lt;att:UInt32 /&gt;''' - Holds an unsigned 32 bit integer valued Attribute.
* '''&lt;att:Float32 /&gt;''' - Holds a 32 bit floating point valued Attribute.
* '''&lt;att:Float64 /&gt;''' - Holds a 64 bit floating point valued Attribute.
* '''&lt;att:String /&gt;''' - Holds a String valued Attribute.
* '''&lt;att:URL /&gt;''' - Holds a URL valued Attribute.
* '''&lt;att:Container /&gt;''' - Holds a Container Attribute.
* '''&lt;att:XML /&gt;''' - Holds any XML and identifies it as an Attribute. (Assuming we want to wrap foreign XML in an Attribute tag)

This is interesting because the syntactic information is easily separable from the semantic using the namespaces and the Attributes really become the things that they represent (classes and values)&lt;br/&gt;
[[User:Ndp|ndp]] 09:18, 21 January 2009 (PST)
&lt;/blockquote&gt;
----

=== dap:Aliases ===
Remove the Alias data type from the DAP/DDX the semantics are evil and we haven't ever made them work.


[[Category:Development|DAP3/4]] [[Category:DAP4|DAP3/4]]</text>
      <sha1>fpvb7oefpur0nb105gyckv4k7nuxpet</sha1>
    </revision>
  </page>
</mediawiki>
