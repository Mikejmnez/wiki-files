<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.11/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.11/ http://www.mediawiki.org/xml/export-0.11.xsd" version="0.11" xml:lang="en">
  <siteinfo>
    <sitename>OPeNDAP Documentation</sitename>
    <dbname>wikidb</dbname>
    <base>https://docs.opendap.org/index.php/Home</base>
    <generator>MediaWiki 1.38.4</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">OPeNDAP Documentation</namespace>
      <namespace key="5" case="first-letter">OPeNDAP Documentation talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>DAP4: Constructing a DDX from a Query</title>
    <ns>0</ns>
    <id>804</id>
    <revision>
      <id>7966</id>
      <parentid>7950</parentid>
      <timestamp>2012-04-13T20:00:54Z</timestamp>
      <contributor>
        <username>DennisHeimbigner</username>
        <id>36</id>
      </contributor>
      <origin>7966</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2288" sha1="q34oekmm8l6874q6a24e3tz0kbbnb08" xml:space="preserve">[[Category:Development|Development]][[Category:DAP4|DAP4]]
[[OPULS_Development| &lt;&lt; Back to OPULS Development]]

==Introduction==

An important aspect of query evaluation has to do with the construction of what may be referred to as a DATADDX. It defines the structure of a DDX that is returned to the caller as the result of a request to a DAP4 server.

The returned DATADDS for DAP2 was relatively well-defined as long as one did not use any server-side functions. As far as I know, how the result of such a function call was to be defined in the returned DATADDS was never formally (or even informally) defined.

It can be expected that DAP4 will make much more use of complex queries involving a combination of constraints and server-side functions. So rules must be defined as formally as possible to define what the result of any possible query will look like.

A specific problem is that the resulting DATADDX may have only have a loose relation to any DDX representing the raw dataset.  This is because server-side computations will not have been represented in the original DDX, but only in the DATADDX.

Initial thoughts based on my  "[[DAP4: Possible Notation for Server Commands | Possible Notation for Server Commands]]" document.

# All functions have a defined "return type". Since, unfortunately, DAP4 -- like CDM -- has no notion of separately defined type, the return type of a function would be defined as a variable possibly nested in some set of groups and with some associated attributes.
# A function may be defined to have a "void" return type, which means it is executed for its side-effects on the server.
# Any expression that is not assigned to a variable and does not have a void return type will have its return value returned to the caller as part of a DATADDX.
# As a consequence of #3, rules must be defined for merging the output DATADDX of multiple expressions into a single DATADDX. The simplest merge might operate as follows:
## A tree of groups is defined using the groups that are associated with the return type of an included expression (see #1 above).
## The variables, with their attributes, are inserted into the group tree. If there are duplicate variables, then an error is reported (need a better soln for this case).


''Dennis Heimbigner''</text>
      <sha1>q34oekmm8l6874q6a24e3tz0kbbnb08</sha1>
    </revision>
  </page>
</mediawiki>
