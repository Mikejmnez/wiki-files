<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.11/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.11/ http://www.mediawiki.org/xml/export-0.11.xsd" version="0.11" xml:lang="en">
  <siteinfo>
    <sitename>OPeNDAP Documentation</sitename>
    <dbname>wikidb</dbname>
    <base>https://docs.opendap.org/index.php/Home</base>
    <generator>MediaWiki 1.38.4</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">OPeNDAP Documentation</namespace>
      <namespace key="5" case="first-letter">OPeNDAP Documentation talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>DAP4: Alternate Proposal for a Constraint Expression Syntax</title>
    <ns>0</ns>
    <id>867</id>
    <revision>
      <id>9958</id>
      <parentid>9957</parentid>
      <timestamp>2013-10-17T19:50:23Z</timestamp>
      <contributor>
        <username>DennisHeimbigner</username>
        <id>36</id>
      </contributor>
      <origin>9958</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5395" sha1="61x8p8nnyhg135rxy3uipxktefaaxoo" xml:space="preserve">[[Category:Development|Development]][[Category:DAP4|DAP4]]
[[OPULS_Development| &lt;&lt; Back to OPULS Development]]

==Background==

The current approach for OPULS has been to design
the grammar and semantics of constraint expressions.

It occurs to me, however, that the concurrent thing we need to
do is describe what kinds of DMRs will result from our
proposed constraints. That is, given a constraint and a DMR
for the unconstrained dataset.  describe the DMR that
corresponds to the result of applying the constraint.

==Proposal==

For brevity, I will use the term CDMR for the constrained DMR and
just DMR for the unconstrained DMR.

Specifically, we need to specify what declarations
are present in the CDMR and how they relate to the
declarations from the DMR.

My current format is that a constraint is either
a projection or filter or a definition Roughly this.
&lt;pre&gt;
constraint:   projection
            | projection '|' predicate
            | name = [x:y:z]
            ;
&lt;/pre&gt;

Note that selections
on arrays is currently omitted since we have not
come to agreement about it. Only projections/slicing
and filters on sequences are considered.
Also, my goal is to have a completely self-contained
CDMR that contains the minimal set of declarations
so that there are no undefined references.

===Enumerations===

An enumeration is included in the
CDMR only if some variable or field references it.

===Existing Shared Dimensions===

Shared dimension declarations from the DMR are not included
in the CDMR. A reference in the CDMR to a shared
dimension in the dmr is allowed; it this occurs, then the
declaration of the shared dimension is included in the
CDMR.

===New Shared Dimensions===

New shared dimensions can be defined. They are not
allowed to have the same name as an existing shared
dimension in the DMR (alternative is to override).

===Variables===

Each clause in the constraint must specify a top
level variable and that variable is declared
int the CDMR.

===Atomic Variables===

If the variable is atomic, then it is included
in the CDMR with the same type and the same arity,
but with each dimension being either an anonymous
dimension or a shared dimension, including possibly
a new shared dimension.

===Structure Variables===

If the variable is a Structure, then a subset of its fields
will be included in the variable declaration where the
fields are those specifically mentioned in a constraint
projection. As with atomic variables, each structure
and field will have the same arity and type as the
underlying declaration in the DMR.

===Sequence Variables===

If the variable is a Sequence, then for declaration
purposes, it is treated like a Structure (as above).
Note that applying a filter to a Sequence will not change
its declaration form because the number of records in the
sequence is not specified in the DMR. Note also that mentioning
a Sequence field in the filter does not necessarily mean it will
be included in the DMR. It will only be included if it is mentioned
in the projection part of the constraint.

===Fields===

The above rules are applied recursively to fields
of Structures and Sequences.

===Groups===
Each declaration in the CDMR that corresponds to a declaration
in the DMR will cause its containing group (and that group's parents)
to be included in the CDMR. This ensures that the FQN for a declaration
in the CDMR is the same as in the DMR.

For new shared dimension declarations, the constraint can specify
a group by giving the full FQN for the new dimension. Otherwise,
the new shared dimension will be included in the root group.
Remember that name clashes are not allowed, so some declarations
of new shared dimensions will be illegal and will cause an error
response.

[[User:dmh|Dennis Heimbigner]] Initial draft 10/16/2013

==Addendum==
Using the above rules, I believe a corresponding grammar is as follows.
Note that the {...} rules are not included (yet).
&lt;pre&gt;
%token NAME STRING INTEGER FLOAT BOOLEAN
%left ','
%precedence NOT
%start constraint
%%
constraint:
	constraintlist
	;
constraintlist:
          clause
        | constraint ';' clause
        ;
clause:
          projection
        | selection
        | dimdef
        ;
projection:
        segmentlist
        ;
segmentlist:
          segment
        | segmentlist '.' segment
        ;
segment:
          name
        | name slicelist
        ;
slicelist: 
          slice
        | slicelist slice
        ;
slice:
          '[' ']' /* total dimension */
        | '[' dimref ']' /* reference to an existing dimension */
        |  '[' index ']'
        | '[' index ':' index ']'
        | '[' index ':' index ':' index ']'
        | '[' index ':' ']'
        | '[' index ':' index ':' ']'
        ;
index:  INTEGER ;

selection:
        projection '|' filter
        ;
filter:
          predicate
        | predicate ',' predicate  /* ',' == AND */
        | '!' predicate %prec NOT
        ;
predicate:
          primary relop primary
        | primary eqop primary eqop primary
        | primary eqop primary
        ;

relop: '&lt;' | '&gt;' | '&lt;' '=' | '&gt;' '=' ;
eqop: '=' | '!' '=' | '~' '=' ;

primary:
          fieldpath
        | constant
        ;
fieldpath:
          name
        | fieldpath '.' name
        ;
dimref: NAME ;
dimdef:
        NAME '=' slice
        ;
name: NAME ;
constant: STRING | INTEGER | FLOAT | BOOLEAN ;
&lt;/pre&gt;

==Discussion==</text>
      <sha1>61x8p8nnyhg135rxy3uipxktefaaxoo</sha1>
    </revision>
  </page>
</mediawiki>
