<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.11/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.11/ http://www.mediawiki.org/xml/export-0.11.xsd" version="0.11" xml:lang="en">
  <siteinfo>
    <sitename>OPeNDAP Documentation</sitename>
    <dbname>wikidb</dbname>
    <base>https://docs.opendap.org/index.php/Home</base>
    <generator>MediaWiki 1.38.4</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">OPeNDAP Documentation</namespace>
      <namespace key="5" case="first-letter">OPeNDAP Documentation talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Hyrax - Apache Integration</title>
    <ns>0</ns>
    <id>122</id>
    <revision>
      <id>12227</id>
      <parentid>12226</parentid>
      <timestamp>2016-06-23T13:00:02Z</timestamp>
      <contributor>
        <username>Ndp</username>
        <id>2</id>
      </contributor>
      <comment>/* Apache Authentication */</comment>
      <origin>12227</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="7184" sha1="7sbrrz8kpqqd1raiixj4danljv6jftk" xml:space="preserve">== Overview ==
The problem of linking Tomcat with Apache has been greatly reduced as of Apache 2.2. In previous incarnations of Apache &amp; Tomcat, it was fairly complex. To see how to solve the problem for older versions of Apace, see the [[old Apache Integration instructions]]. What follows are the instructions for Apache 2.2 and Tomcat 6.x.

== Prerequisites ==
* Apace 2.2 or greater
* Tomcat 6.x or greater
* mod_proxy_ajp installed in Apache (typically this is present in 2.2+)

== Connecting Tomcat to Apache  ==
=== Tomcat ===
You have to create the AJP connector in the ''conf/server.xml'' file:


&lt;source lang="xml" &gt;
    &lt;!-- Define an AJP 1.3 Connector on port 8009 --&gt;
    &lt;Connector 
        port="8009" 
        protocol="AJP/1.3" 
        redirectPort="443" &lt;!-- Redirect to the Apache Web Server secure port --&gt;
        scheme="https" &lt;!-- Use TLS to connect --&gt;
        address="127.0.0.1" &lt;!-- Only allow connections from this host --&gt;
        &lt;!-- Setting tomcatAuthentication to 'false' will allow tomcat web applications 
                to get user session information from Apache, such as uid and other user properties. --&gt;
        tomcatAuthentication="true" 
        /&gt;
&lt;/source&gt;

This line will enable AJP connections to the 8009 port of your tomcat server (localhost for example).

=== Apache ===
In the example below, pay special attention to the ''protocol'' part of the proxy URL - it uses '''ajp://''' and not &lt;nowiki&gt;'http://'&lt;/nowiki&gt;.&lt;br&gt;
Add this to Apache's ''httpd.conf'' file:

&lt;source lang="apache"&gt;
&lt;Proxy *&gt;
    AddDefaultCharset Off
    Order deny,allow
    Allow from all
&lt;/Proxy&gt;
 
ProxyPass /opendap ajp://localhost:8009/opendap
ProxyPassReverse /opendap ajp://localhost:8009/opendap
&lt;/source&gt;

NB: It's possible to embed these in a ''VirtualHost'' directive.

=== How It Works ===
ProxyPass and ProxyPassReverse are classic reverse proxy directives used to forward the stream to another location.
''ajp://...'' is the AJP connector location (your tomcat's server host/port)

A web client will connect through HTTP to ''&lt;nowiki&gt;http://localhost/&lt;/nowiki&gt;'' (supposing your apache2 server is running on localhost), the ''mod_proxy_ajp'' will forward you request transparently using the AJP protocol to the tomcat application server on localhost:8009.

== Apache Compressed Responses ==

Many OPeNDAP clients accept compressed responses. This can greatly increase the efficiency of the client/server interaction by diminishing the number of bytes actually transmitted over "the wire". Compression can reduce the number of bytes transmitted by an order of magnitude for many datasets!

Tomcat provides native compression support for the GZIP compression mechanism, however it is NOT turned on by default. More perversely, even if you have configured Tomcat to provide compressed responses, if you are using AJP to proxy Tomcat through the Apache web server compression will not be enabled unless you configure the Apache web server to compress responses. This is because Tomcat NEVER compresses responses sent over AJP.

When you configure your Apache web server to provide compressed responses you will probably want to make sure that Apache doesn't apply compression to images (In general images are already compressed and there is little to gain by attempting to compress them and a lot of CPU cycles to burn if you try)

[http://httpd.apache.org/docs/2.0/mod/mod_deflate.html Apache compression module]

[http://www.askapache.com/htaccess/apache-speed-compression.html AskApache Speed Tips]

[http://betterexplained.com/articles/how-to-optimize-your-site-with-gzip-compression/ BetterExplained explains Apache Compression]

=== httpd.conf ===

You will need to add (something like) the following to your Apache web server's httpd.conf file:

&lt;source lang="apache"&gt;
#
# Compress everything except images.
#
&lt;Location /&gt;
    # Insert filter
    SetOutputFilter DEFLATE

    # Netscape 4.x has some problems...
    BrowserMatch ^Mozilla/4 gzip-only-text/html

    # Netscape 4.06-4.08 have some more problems
    BrowserMatch ^Mozilla/4\.0[678] no-gzip

    # MSIE masquerades as Netscape, but it is fine
    # BrowserMatch \bMSIE !no-gzip !gzip-only-text/html

    # NOTE: Due to a bug in mod_setenvif up to Apache 2.0.48
    # the above regex won't work. You can use the following
    # workaround to get the desired effect:
    BrowserMatch \bMSI[E] !no-gzip !gzip-only-text/html

    # Don't compress images
    SetEnvIfNoCase Request_URI \
    \.(?:gif|jpe?g|png)$ no-gzip dont-vary

    # Make sure proxies don't deliver the wrong content
    Header append Vary User-Agent env=!dont-vary
&lt;/Location&gt;
&lt;/source&gt;
&lt;/font&gt;

== Apache Authentication ==

Hyrax may deployed into service stacks in which ''httpd'' is expected to handle the work of authenticating users. In order for Tomcat (and thus Hyrax) to be able to receive the users login name and attributes from ''httpd'' the following things need to be done to the Tomcat configuration.

In the ''$CATALINA_HOME/conf/server.xml''  file the default definition of the AJP connector typically looks like:

&lt;source lang="xml" &gt;
    &lt;!-- Define an AJP 1.3 Connector on port 8009 --&gt;
    &lt;Connector port="8009" protocol="AJP/1.3" redirectPort="8443" /&gt;
&lt;/source&gt;

This line may be "commented out," with &amp;lt;!-- on a line before and --&amp;gt; on a line after. If so, remove those lines. If you cannot find the AJP connector element, simply create it from the code above. You will need to add several attributes to the Connector element.

* Set the &lt;code&gt;tomcatAuthentication&lt;/code&gt; attribute to "false", this must be done in order to receive authentication information from Apache.
* Configure the connector to use SSL - If your Apache web server is using SSL/HTTPS (and it should be), you need to tell Tomcat about that fact so that it can construct internal URLs correctly. 
** Set the &lt;code&gt;scheme&lt;/code&gt; attribute to "https".
** Set the &lt;code&gt;proxyPort&lt;/code&gt; attribute to Apache httpd's secure socket, typically "443" (This ensures that secure traffic gets routed through Apache httpd and and then through the AJP connector to Tomcat, allowing httpd's authentication/authorization stack to be invoked on the request).
* Restrict access to the AJP Connector. By disabling access to the connector from anywhere but the local system you prevent system probing from the greater world. To do this, set the &lt;code&gt;address&lt;/code&gt; attribute to "127.0.0.1".

When you are finished making changes, your connector should look something like this:

&lt;source lang="xml" &gt;
    &lt;!-- Define an AJP 1.3 Connector on port 8009 --&gt;
    &lt;Connector 
        port="8009" 
        protocol="AJP/1.3" 
        redirectPort="443" 
        scheme="https"
        address="127.0.0.1" 
        tomcatAuthentication="false" 
        /&gt;
&lt;/source&gt;

Restart Tomcat to load the new configuration. Now Tomcat/Hyrax should see all of the authentication attributes from ''httpd''. 

NB: You may wish review Tomcat documentation for the AJP Connector as there many attributes/options that can be used to tune performance. [http://tomcat.apache.org/tomcat-7.0-doc/config/ajp.html Here's a link to the Tomcat 7 AJP Connector docs]</text>
      <sha1>7sbrrz8kpqqd1raiixj4danljv6jftk</sha1>
    </revision>
  </page>
</mediawiki>
