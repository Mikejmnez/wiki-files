<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.11/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.11/ http://www.mediawiki.org/xml/export-0.11.xsd" version="0.11" xml:lang="en">
  <siteinfo>
    <sitename>OPeNDAP Documentation</sitename>
    <dbname>wikidb</dbname>
    <base>https://docs.opendap.org/index.php/Home</base>
    <generator>MediaWiki 1.38.4</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">OPeNDAP Documentation</namespace>
      <namespace key="5" case="first-letter">OPeNDAP Documentation talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>DAP4: DDX Lexical Elements</title>
    <ns>0</ns>
    <id>739</id>
    <revision>
      <id>9287</id>
      <parentid>9211</parentid>
      <timestamp>2012-09-04T16:34:38Z</timestamp>
      <contributor>
        <username>Jimg</username>
        <id>3</id>
      </contributor>
      <minor/>
      <comment>/* DAP4 Lexical elements */</comment>
      <origin>9287</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="6225" sha1="24vra911fc0ipvoq2qz070ucua8anbl" xml:space="preserve">[[OPULS_Development| &lt;&lt;back to OPULS Development]]

This document describes the lexical elements that occur in
the DAP4 grammar. It is expected that this definition will end
up in the DAP4 specification document. It is also expected that
it will be implemented by server and client code using some equivalent
regular expression mechanism.

Within the
[http://dl.dropbox.com/u/53929684/xsd.rng Relax-NG (rng) DAP4 grammar],
there are markers for occurrences of
primitive type such as integers, floats, or strings.  The
markers typically look like this when defining an attribute
that can occur in the DAP4 DDX.
&lt;pre&gt;&amp;lt;attribute name=&amp;quot;namespace&amp;quot;&amp;gt;&amp;lt;data type=&amp;quot;string&amp;quot;/&amp;gt;&amp;lt;/attribute&amp;gt;&lt;/pre&gt;
The &amp;quot;&amp;lt;data type=&amp;quot;string&amp;quot;/&amp;gt;&amp;quot;
specifies the lexical class for the values that this
attribute can have. In this case, the namespace attribute is
defined to have a String value.  Similar notation is used
for values occurring as text within an xml element.  The
lexical specification later in this document defines the
legal lexical structure for such lexical items.
Specifically, it defines the format of the following lexical
items.
# Constants, namely: string, float, integer, and character.
# Identifiers

The specification is written using the
ISO/IEC 9945-2:2003 Information technology -- Portable Operating System Interface (POSIX) -- Part 2: System Interfaces (see [http://www.iso.org/iso/iso_catalogue/catalogue_ic/catalogue_detail_ics.htm?csnumber=38790]).
This is the extended Posix regular expression specification.

I have augmented it in the following ways.
#Names are assigned to regular expressions using the notation&lt;br&gt;''name = regular-expression''
#Named expressions can be used in subsequent regular expressions by using the notation {name}. Such occurrences are equivalent to textually substituting the expression associated with name for the {name} occurrence: More or less like a macro.

===DAP4 Lexical elements===
Notes:
#The definition of {UTF8} is deferred to the next section.
#Comments are indicated using the &amp;quot;//&amp;quot; notation.
#Standard xml escape formats (&amp;amp;xDD) are assumed to be allowed anywhere.

'''Basic character set definitions'''&lt;br&gt;
&lt;pre&gt;
CONTROLS   = [\x00-\x1F] // ASCII control characters
WHITESPACE = [ \r\t\f]+
HEXCHAR    = [0-9a-zA-Z]
// ASCII printable characters
ASCII      = [0-9a-zA-Z !&amp;quot;#$%&amp;amp;'()*+,-./:;&amp;lt;=&amp;gt;?@[\\\]\\^_`|{}~]
&lt;/pre&gt;

'''Ascii characters that may appear unescaped in Identifiers'''&lt;br&gt;
This is assumed to be basically all ASCII printable characters
except the characters ' ', '.', '/', '&amp;quot;', ' ' ', and '&amp;amp;'.
Occurrences of these characters are assumed to be representable
using the standard xml '&amp;amp;xx;' notation.
&lt;pre&gt;
IDASCII    = [0-9a-zA-Z!#$%'()*+,-:;&amp;lt;=&amp;gt;?@[\\\]\\^_`|{}~]
&lt;/pre&gt;

'''The numeric classes: integer and float'''&lt;br&gt;
&lt;pre&gt;
INTEGER    = {INT}|{UINT}|{HEXINT}
INT        = [+-][0-9]+{INTTYPE}?
UINT       = [0-9]+{INTTYPE}?
HEXINT     = {HEXSTRING}{INTTYPE}?
INTTYPE    = ([BbSsLl]|&amp;quot;ll&amp;quot;|&amp;quot;LL&amp;quot;)
HEXSTRING  = (0[xX]{HEXCHAR}+)
FLOAT      = ({MANTISSA}{EXPONENT}?)|{NANINF}
EXPONENT   = ([eE][+-]?[0-9]+)
MANTISSA   = [+-]?[0-9]*\.[0-9]*
NANINF     = (-?inf|nan|NaN)
&lt;/pre&gt;
'''The Character classes'''&lt;br&gt;
&lt;pre&gt;
STRING     = ([^&amp;quot;\&amp;amp;]|{XMLESCAPE})*
CHARACTER  = ([^'\&amp;amp;]|{XMLESCAPE})
&lt;/pre&gt;

Note that the character type only supports ASCII characters because
it can only hold a single 8-bit byte.

'''The Identifier class'''&lt;br&gt;
&lt;pre&gt;
ID         = {IDCHAR}+
IDCHAR     = ({IDASCII}|{XMLESCAPE}|{UTF8})
XMLESCAPE  = &amp;amp;x{HEXCHAR}{HEXCHAR};
&lt;/pre&gt;

Note that the above lexical element classes are not
disjoint. For example, the sequence of characters 1234 can
be either an identifer,a float, or an integer. So the order
of testing is assumed to be this.
#INTEGER
#FLOAT
#ID
#STRING

===UTF-8 Character Encodings===
We discuss UTF-8 character encoding in the context
of this document: [http://www.w3.org/2005/03/23-lex-U].

The most correct (validating) version of UTF8 character set is as follows.
&lt;pre&gt;
UTF8 =   ([\xC2-\xDF][\x80-\xBF])     
       | (\xE0[\xA0-\xBF][\x80-\xBF])     
       | ([\xE1-\xEC][\x80-\xBF][\x80-\xBF])     
       | (\xED[\x80-\x9F][\x80-\xBF])     
       | ([\xEE-\xEF][\x80-\xBF][\x80-\xBF])     
       | (\xF0[\x90-\xBF][\x80-\xBF][\x80-\xBF])     
       | ([\xF1-\xF3][\x80-\xBF][\x80-\xBF][\x80-\xBF])     
       | (\xF4[\x80-\x8F][\x80-\xBF][\x80-\xBF])
&lt;/pre&gt;
The lines of the expression cover the UTF8 characters as follows:
# non-overlong 2-byte
# excluding overlongs
# straight 3-byte
# excluding surrogates
# straight 3-byte
# planes 1-3
# planes 4-15
# plane 16

Note that ASCII and control characters are not included. 

The above reference also defines some alternative regular expressions.

The most relaxed version of UTF8 is this.
&lt;pre&gt;
UTF8 = ([\xC0-\xD6].)
      |([\xE0-\xEF]..)
      |([\xF0-\xF7]...)
&lt;/pre&gt;

The partially relaxed version of UTF8 is this.
&lt;pre&gt;
UTF8    = ([\xC0-\xD6][\x80-\xBF])        
        | ([\xE0-\xEF][\x80-\xBF][\x80-\xBF])        
        | ([\xF0-\xF7][\x80-\xBF][\x80-\xBF][\x80-\xBF])
&lt;/pre&gt;

We deem it acceptable to use this last relaxed expression
for validating UTF-8 character strings.

===Discussion===

[[User:Jimg|Jimg]] 13:05, 28 March 2012 (PDT) 

When we get around to this one, I think we will need to decide if the characters in a variable as represented in the DDX and in a URL's query string (i.e., the constraint) have to be the same. In particular, characters like dot (.) and space ( ) present special problems. Specifically, a dot has a special meaning in the syntax of an identifier and a space, while it means nothing in the syntax of a constraint, does odd things to a scanner. What's more, but convention plus (+) is used in a URL for space while dots are normally not escaped, but would be for DAP. So there's several layers of escaping that will be done by several different systems. It's solvable, of course, but I think we might want two formal definitions for identifiers, one for 'in the DDX' and equivalent representations and one for 'in the URL'.

I think the idea of a formal spec for identifiers is a very good thing.</text>
      <sha1>24vra911fc0ipvoq2qz070ucua8anbl</sha1>
    </revision>
  </page>
</mediawiki>
