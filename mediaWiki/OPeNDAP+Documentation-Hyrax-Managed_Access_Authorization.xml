<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.11/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.11/ http://www.mediawiki.org/xml/export-0.11.xsd" version="0.11" xml:lang="en">
  <siteinfo>
    <sitename>OPeNDAP Documentation</sitename>
    <dbname>wikidb</dbname>
    <base>https://docs.opendap.org/index.php/Home</base>
    <generator>MediaWiki 1.38.4</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">OPeNDAP Documentation</namespace>
      <namespace key="5" case="first-letter">OPeNDAP Documentation talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Hyrax - Managed Access (Authorization)</title>
    <ns>0</ns>
    <id>896</id>
    <revision>
      <id>11111</id>
      <parentid>11110</parentid>
      <timestamp>2014-11-28T14:27:01Z</timestamp>
      <contributor>
        <username>Ndp</username>
        <id>2</id>
      </contributor>
      <comment>/* Policy */</comment>
      <origin>11111</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="14095" sha1="nh3qqur9nwqu9ptbaxq5v9pukow165l" xml:space="preserve">

&lt;!-- span style="font-size:60px;color:grey;"&gt;UNDER CONSTRUCTION&lt;/span --&gt;


== Overview ==

The authentication and authorization mechanisms in both the Apache Web Server (''httpd'') and the Tomcat Servlet container are well documented and widely used.

We hope to address the following perceived shortcomings of the apache product's authorization components:

# Difficult to specify fine grain access control policies for complex heterogeneous service stacks.
# The option to centralize the PDP so that multiple services can be controlled from a single policy profile. 

A simple policy decision point (SimplPDP) was coded that can accommodate many different types of policies. A simple regex policy was implemented that uses regex matching to white list users, resources, http verbs, and queries.

The remainder of this document describes how to get, build, install, configure, and run the Hyrax Managed Access prototype.

== Terms ==

; [http://en.wikipedia.org/wiki/Authentication Authentication]
: This is the process of confirming the identity of the user. The end result is a User ID (''uid'' or ''UID'') which may be accessed by the software components via (both?)  the Apache API (mod_*) and the Java ServletAPI (Tomcat servlets) used to trigger authorization policy chains or may be logged along with relevant request information. 

; [http://en.wikipedia.org/wiki/Authorization Authorization]
: Authorization is the function of specifying access rights to resources. A user may be ''authorized'' (some say ''permitted'') to access a resource. 

; [http://en.wikipedia.org/wiki/Identity_provider Identity Provider (IdP)]
: Also known as an '''Identity Assertion Provider''' an '''Identity Provider (IdP)''' is a service that provides authentication and identity information services. An '''IdP''' is a kind of provider that creates, maintains, and manages identity information for principals and provides principal authentication to other service providers within a federation, such as with web browser profiles.

; Policy Administration Point (PAP)
: Point which manages access authorization policies

; Policy Decision Point (PDP)
: Point which evaluates access requests against authorization policies before issuing access decisions

; Policy Enforcement Point (PEP)
:  Point which intercepts user's access request to a resource, makes a decision request to the PDP to obtain the access decision (i.e. access to the resource is approved or rejected), and acts on the received decision

;Policy Information Point (PIP)
:The system entity that acts as a source of attribute values (i.e. a resource, subject, environment)

; Policy Retrieval Point (PRP)
:Point where the XACML access authorization policies are stored, typically a database or the filesystem.

; Service Provider (SP)
: A '''Service Provider (SP)''' is a Web Service that utilizes an IdP service to determine the identity of it's users. Or more broadly, a role donned by a system entity where the system entity provides services to principals or other system entities.


See [http://www.thedotnetfactory.com/learningcenter/technologies/service-identity-providers Service Providers, Identity Providers &amp; Security Token Services explained] for more.


== Requirements ==

* JDK-1.6.x or higher for your target system.
* ANT 1.7.0 or newer
* Hyrax 1.9.7 or greater

== Git ==

* Download the managed-access branch of the OLFS from GitHub. 
: The branch is here: https://github.com/OPENDAP/olfs/tree/managed-access
: And the download URL is: https://github.com/OPENDAP/olfs/archive/managed-access.zip
* Unzip the file, open a terminal (if you haven't yet), and cd into the managed-access directory that was created when you unzipped the file.

== Build ==

* In your terminal enter the command
::&lt;code&gt;ant -f server&lt;/code&gt;
: If successful, this will create the file ''build/dist/opendap.war''

== Install ==

* Copy the new WebArchive (.war) file into the Tomcat web apps directory
::&lt;code&gt;cp build/dist/opendap.war $CATALINA_HOME/webapps&lt;/code&gt;
* Restart Tomcat

== Web Service Configuration ==

* Copy the configuration file from the web application into the Hyrax persistent content directory:
::&lt;code&gt;cp $CATALINA_HOME/webapps/opendap/initialContent/PEPFilter.xml $CATALINA_HOME/content/opendap/&lt;/code&gt; 
* Edit the Hyrax web.xml file and make sure the PEPFilter config parameter's value is set to the fully qualified path to the file you copied in the previous step.
Example:
&lt;source lang="xml"&gt;
    &lt;filter&gt;
        &lt;filter-name&gt;PEP&lt;/filter-name&gt;
        &lt;filter-class&gt;opendap.auth.PEPFilter&lt;/filter-class&gt;
        &lt;init-param&gt;
            &lt;param-name&gt;config&lt;/param-name&gt;
            &lt;param-value&gt;/usr/local/hyrax/tomcat/content/opendap/PEPFilter.xml&lt;/param-value&gt;
        &lt;/init-param&gt;
    &lt;/filter&gt;
&lt;/source&gt;
This excerpt from the ''web.xml'' file shows the ''&lt;filter&gt;'' element. The PEPFilter will look for it's configuration in the file: ''/usr/local/hyrax/tomcat/content/opendap/PEPFilter.xml''

== PEP/PDP Configuration ==

Edit the PEPFilter.xml file that you referenced in the web.xml file above. It should look something like this:
&lt;source lang="xml"&gt;
&lt;PolicyEnforcementPointFilter&gt;


    &lt;!-- You can use a RemotePDP --&gt;
    &lt;!-- PolicyDecisionPoint class="opendap.auth.RemotePDP"&gt;
        &lt;PDPServiceEndpoint&gt;http://localhost:8080/pdp&lt;/PDPServiceEndpoint&gt;
    &lt;/PolicyDecisionPoint --&gt;


    &lt;!-- You can use an in memory local PDP --&gt;
    &lt;PolicyDecisionPoint class="opendap.auth.SimplePDP"&gt;
        &lt;Policy class="opendap.auth.RegexPolicy"&gt;
            &lt;role&gt;.*&lt;/role&gt;
            &lt;resource&gt;.*(/|\.(css|png|jpg|ico|gif|xsl|jsp)|/contents.html|/catalog.html|/catalog.xml)$&lt;/resource&gt;
            &lt;queryString&gt;.*$&lt;/queryString&gt;
            &lt;allowedAction&gt;GET&lt;/allowedAction&gt;
        &lt;/Policy&gt;
        &lt;Policy class="opendap.auth.RegexPolicy"&gt;
            &lt;role&gt;guest&lt;/role&gt;
            &lt;resource&gt;.*\.(dds|html|das|ddx)$&lt;/resource&gt;
            &lt;queryString&gt;.*$&lt;/queryString&gt;
            &lt;allowedAction&gt;GET&lt;/allowedAction&gt;
        &lt;/Policy&gt;
        &lt;Policy class="opendap.auth.RegexPolicy"&gt;
            &lt;role&gt;manager&lt;/role&gt;
            &lt;resource&gt;.*$&lt;/resource&gt;
            &lt;queryString&gt;.*$&lt;/queryString&gt;
            &lt;allowedAction&gt;GET&lt;/allowedAction&gt;
            &lt;allowedAction&gt;POST&lt;/allowedAction&gt;
        &lt;/Policy&gt;
        &lt;Memberships&gt;
           &lt;group id="guest" &gt;
               &lt;user id="GUEST" /&gt;
           &lt;/group&gt;
           
           &lt;group id="users" &gt;
               &lt;user id="ndp_opendap" /&gt;
               &lt;user id="jhrg" /&gt;
           &lt;/group&gt;
           
           &lt;group id="cmip" &gt;
               &lt;user id="ndp_opendap" /&gt;
           &lt;/group&gt;
    
           &lt;group id="managers" &gt;
               &lt;user id="root" /&gt;
               &lt;user id="ndp_opendap" /&gt;
               &lt;user id="jhrg" /&gt;
           &lt;/group&gt;
    
           &lt;role id="manager"&gt;
               &lt;group id="managers" /&gt;
               &lt;group id="cmip" /&gt;
           &lt;/role&gt;
    
           &lt;role id="guest"&gt;
               &lt;group id="guest" /&gt;
           &lt;/role&gt;
    
        &lt;/Memberships&gt;
    &lt;/PolicyDecisionPoint&gt;
&lt;/PolicyEnforcementPointFilter&gt;
&lt;/source&gt;

The PEP must be associated with a PDP. In this example the PEP is configured to use an in memory instance of the SimplePDP class.

=== Policy Decision Point ===

The ''PolicyDecisionPoint'' element identifies the PDP that will be used by the PEP filter, and provides the configuration for the PDP class referenced. 

This ''PolicyDecisionPoint'' element identifies the ''opendap.auth.SimplePDP'' class as the PDP to use.
&lt;source lang="xml"&gt;
    &lt;PolicyDecisionPoint class="opendap.auth.SimplePDP"&gt;
        .
        .
        .
    &lt;/PolicyDecisionPoint&gt;
&lt;/source&gt;

The contents of the ''PolicyDecisionPoint&gt;'' element are the specific configuration components for the named class, in this case ''opendap.auth.SimplePDP''.

=== A Simple Policy Decision Point ===

The class opendap.auth.SimplePDP is an Policy Decision Point implementation crafted to hold a heterogeneous collection of policy objects. For any particular request the SimplePDP will work through it's ordered list of policies asking each on in turn to evaluate the request. If a policy allows the request, then the request is allowed. If no policy allows the request, then the request is denied. 

==== Policy  ====

The Policy elements in the configuration each define an access control policy. Different Policy implementations will have different content in the body of the Policy element.

Currently we have implemented a RegexPolicy. A RegexPolicy is defined by 3 regular expressions: role, resource, &amp; queryString, and list of allowedAction elements:


&lt;source lang="xml"&gt;
        &lt;Policy class="opendap.auth.RegexPolicy"&gt;
            &lt;role&gt;.*&lt;/role&gt;
            &lt;resource&gt;.*(/|\.(css|png|jpg|ico|gif|xsl|jsp)|/contents.html|/catalog.html|/catalog.xml)$&lt;/resource&gt;
            &lt;queryString&gt;.*$&lt;/queryString&gt;
            &lt;allowedAction&gt;GET&lt;/allowedAction&gt;
        &lt;/Policy&gt;
        &lt;Policy class="opendap.auth.RegexPolicy"&gt;
            &lt;role&gt;guest&lt;/role&gt;
            &lt;resource&gt;.*\.(dds|html|das|ddx)$&lt;/resource&gt;
            &lt;queryString&gt;.*$&lt;/queryString&gt;
            &lt;allowedAction&gt;GET&lt;/allowedAction&gt;
        &lt;/Policy&gt;
        &lt;Policy class="opendap.auth.RegexPolicy"&gt;
            &lt;role&gt;user&lt;/role&gt;
            &lt;resource&gt;.*$&lt;/resource&gt;
            &lt;queryString&gt;.*$&lt;/queryString&gt;
            &lt;allowedAction&gt;GET&lt;/allowedAction&gt;
            &lt;allowedAction&gt;POST&lt;/allowedAction&gt;
        &lt;/Policy&gt;
&lt;/source&gt;

When a RegexPolicy is evaluated each of the 4 user datums are matched against their companion regex, or list in the case of action. If and only if all 4 match will the policy allow the access:

&lt;source lang="java"&gt;
if(_rolePattern.matcher(roleId).matches()){
    if(_resourcePattern.matcher(resourceId).matches()){
        if(_queryStringPattern.matcher(queryString).matches()) {
            if (_allowedActions.contains(HTTP_METHOD.valueOf(httpMethod))) {
                return true;
            }
        }
    }
}
&lt;/source&gt;

==== Memberships: Users, Groups, and Roles ====

The PDP needs to know about Membership relations in it's user population. One can certainly imagine retrieving such information from an LDAP server or even from Shibboleth. However the SimplePDP reads this information from its configuration. The ''Memberships'' element in the config contains two types of child elements: ''group'' &amp; ''role''.  The ''group'' element may contain zero or more child ''user'' elements and nothing else. The ''role'' element may contain zero or more ''group'' elements and nothing else. 

&lt;source lang="xml"&gt;
        &lt;Memberships&gt;
           &lt;group id="guest" &gt;
               &lt;user id="GUEST" /&gt;
           &lt;/group&gt;
           
           &lt;group id="users" &gt;
               &lt;user id="ndp_opendap" /&gt;
               &lt;user id="jhrg" /&gt;
           &lt;/group&gt;
           
           &lt;group id="cmip" &gt;
               &lt;user id="ndp_opendap" /&gt;
           &lt;/group&gt;
    
           &lt;group id="manager" &gt;
               &lt;user id="root" /&gt;
               &lt;user id="ndp_opendap" /&gt;
               &lt;user id="jhrg" /&gt;
           &lt;/group&gt;
    
           &lt;role id="manager"&gt;
               &lt;group id="managers" /&gt;
               &lt;group id="cmip" /&gt;
           &lt;/role&gt;
    
           &lt;role id="guest"&gt;
               &lt;group id="guest" /&gt;
           &lt;/role&gt;
    
        &lt;/Memberships&gt;
&lt;/source&gt;

==== Operation ====

At start up the SimplePDP reads it's configuration and populates in memory objects for it's Polices and it's user memberships information. When a request for a resource is received the following things are passed to the PDP:

* uid
* resourceId
* queryString
* HTTP verb

(While most web access security assertions act on three things: uid, resourceId, and HTTP verb we felt that Hyrax and other servers that may perform significant server side activities in response to content in the query string would benefit from having the opportunity to write Policy implementations that can look more closely at the actual activities being invoked in order to make better crafted allow/deny access decisions)

The SimplePDP uses the uid to locate the list of ''roles'' that the user is "in". Then for each ''role'' that the user is in the SimplePDP applies each policy to the guadtuple: role, resourceId, queryString, HTTP verb. If a policy allows the request then the PDP allows the request. If all  the policies deny the request then PDP denies the request. 

; request is allowed
: When ANY policy allows it.

; request is denied
: When EVERY policy denies it.

==== Examples ====

; Allow anybody to browse around Hyrax but not to access data.
: The following RegexPolicy allows any user (even one that's not in a role since the regex ".*" matches empty string) to browse around Hyrax but doesn't allow them to access any data products.
&lt;source lang="xml"&gt;
        &lt;Policy class="opendap.auth.RegexPolicy"&gt;
            &lt;role&gt;.*&lt;/role&gt;
            &lt;resource&gt;.*(/|\.(css|png|jpg|ico|gif|xsl|jsp)|/contents.html|/catalog.html|/catalog.xml)$&lt;/resource&gt;
            &lt;queryString&gt;.*$&lt;/queryString&gt;
            &lt;allowedAction&gt;GET&lt;/allowedAction&gt;
        &lt;/Policy&gt;
&lt;/source&gt;



; Allow someone in the ''guest'' role get the DDS, DAS, DDX, and HTML data request forms.
: The following RegexPolicy allows the users in the ''guest'' role to access dataset metadata.
 &lt;source lang="xml"&gt;
       &lt;Policy class="opendap.auth.RegexPolicy"&gt;
            &lt;role&gt;guest&lt;/role&gt;
            &lt;resource&gt;.*\.(dds|html|das|ddx)$&lt;/resource&gt;
            &lt;queryString&gt;.*$&lt;/queryString&gt;
            &lt;allowedAction&gt;GET&lt;/allowedAction&gt;
        &lt;/Policy&gt;
&lt;/source&gt;


; Allow  the ''users'' role full access to Hyrax.
: The following RegexPolicy allows the users in the ''user'' role to access dataset metadata.
&lt;source lang="xml"&gt;
        &lt;Policy class="opendap.auth.RegexPolicy"&gt;
            &lt;role&gt;user&lt;/role&gt;
            &lt;resource&gt;.*$&lt;/resource&gt;
            &lt;queryString&gt;.*$&lt;/queryString&gt;
            &lt;allowedAction&gt;GET&lt;/allowedAction&gt;
            &lt;allowedAction&gt;POST&lt;/allowedAction&gt;
        &lt;/Policy&gt;
&lt;/source&gt;</text>
      <sha1>nh3qqur9nwqu9ptbaxq5v9pukow165l</sha1>
    </revision>
  </page>
</mediawiki>
