<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.11/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.11/ http://www.mediawiki.org/xml/export-0.11.xsd" version="0.11" xml:lang="en">
  <siteinfo>
    <sitename>OPeNDAP Documentation</sitename>
    <dbname>wikidb</dbname>
    <base>https://docs.opendap.org/index.php/Home</base>
    <generator>MediaWiki 1.38.4</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">OPeNDAP Documentation</namespace>
      <namespace key="5" case="first-letter">OPeNDAP Documentation talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>UnitTests</title>
    <ns>0</ns>
    <id>857</id>
    <revision>
      <id>12378</id>
      <parentid>12377</parentid>
      <timestamp>2017-05-09T18:51:57Z</timestamp>
      <contributor>
        <username>Jimg</username>
        <id>3</id>
      </contributor>
      <minor/>
      <comment>/* Running tests by name */</comment>
      <origin>12378</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="12327" sha1="ae5naldn80a34ekzxn1enlunfpw5ei3" xml:space="preserve">= Writing Unit Tests for C++ using CppUnit =
This page describes how to write unit tests for C++ classes using CppUnit. The basic process is fairly simple: a ''CppUnit::TestFixture'' is written that provides one or more tests for a specific class. However, there are several tricks to writing tests that will make them much easier to use. These help improve the interactive use of the tests, simplifying finding problems when the tests are run as part of an automated build, since these tests often become a kind of regression test once a class has been developed.

Some parts of these instructions are specific to OPeNDAP and its source code for libdap and the BES, but those parts are limited to code examples and it is easy to see how the same ideas could be applied to similar code that differs in its specifics.

== CppUnit basic layout ==
The example below shows a complete unit test written with ''CppUnit''. Using the helper macros streamlines writing the tests (but also introduces some wrinkles we discuss later on). 

When writing tests, make the default behavior as quiet as possible since the tests will likely be run by an automated build. Use a debug macro or switch to control output of instrumentation.

Here are the main sections of a CppUnit test:

=== Header files ===
To get started, include header files so that you can subclass TestFixture and use the CppUnit macros.
&lt;source lang="cpp"&gt;
#include "config.h"        // Build by autoconf

#include &lt;cppunit/TextTestRunner.h&gt;
#include &lt;cppunit/extensions/TestFactoryRegistry.h&gt;
#include &lt;cppunit/extensions/HelperMacros.h&gt;
&lt;/source&gt;

Then, include the header that defines the class you want to test, other debug tools you use and whatever is needed for ''getopt'' in you build/target environment. Also define static booleans for things like debug switches and other run-time options. Adding a ''debug'' option is good because these tests are often used to track down problems as well as being used as part of automated builds. A debug option lets people see what's wrong without gumming up the works when a machine runs the tests.
&lt;source lang="cpp"&gt;
#include "AttrTable.h"     // The class to test
#include "debug.h"         // Debug macros

#include "GetOpt.h"        // getopt C++ wrapper

static bool debug = false; // Set down in main()

#undef DBG
#define DBG(x) do { if (debug) (x); } while(false);
&lt;/source&gt;

=== Subclassing TestFixture ===
Subclass ''CppUnit::TestFixture''. Use a name that makes it easy to identify the class this code tests (e.g., ''AttrTableTest'' tests ''AttrTable''). The class should have a constructor and destructor and ''setUp()'' and ''tearDown()'' methods. The latter will be run before and after each test is run. The tests themselves are discussed in the next section...
&lt;source lang="cpp"&gt;

using namepsace CppUnit;

namespace libdap {

class AttrTableTest: public TestFixture {
    private:
        AttrTable *at1;

    public:
        AttrTableTest() { }
        ~AttrTableTest() { }

        void setUp()
        {
            at1 = new AttrTable;
        }

        void tearDown()
        {
            delete at1;
            at1 = 0;
        }

    // Tests and macros here...

};

} // namespace libdap
&lt;/source&gt;

=== Writing tests using macros ===
CppUnit tests are written in C++ as methods in the subclass of ''CppUnit::TestFixture''. Each test is a ''void test_name()'' method (i.e., a method that neither takes nor returns values. In the body of these methods various macros can be used to test for various conditions and evaluate (or indicate) success or failure. The two most common macros used in the body of the test methods are:
;CPPUNIT_ASSERT( ''expr'' )
:Where ''expr'' should evaluate to true to indicate the test has behaved as expected, or false otherwise. When ''expr'' is not true, this macro throws an exception that indicates test failure and also ends the test. As with ''assert()'', this macro prints the failed assertion.
;CPPUNIT_FAIL( ''message'' )
:This macro causes a test to fail and prints ''message''.

An example of these macros used in a test:
&lt;source lang="cpp"&gt;
void test_method()
{
    try {
        // at1 is a class member, so it can be used in a method. Assume other code initialized at1...
        CPPUNIT_ASSERT( at1-&gt;name() == "AttrTable" );

        // It's common to call CPPUNIT_ASSERT() more than once
        CPPUNIT_ASSERT( at1-&gt;size() == 7 );
    }
    catch( Error &amp;e ) {
        // CppUnit does not know about exceptions other than its own, so if the code under test throws,
        // it can lead to some odd messages. Catching the exceptions and then using CPPUNIT_FAIL is a 
        // good approach to that issue.
        CPPUNIT_FAIL( "AttrTable threw an exception: " + e.get_error_message() )
    }
}
&lt;/source&gt;

=== Registering tests using macros ===
Once all of the test (methods) of the TestFixture are written, use more macros to register the tests. Do this while still in the body of the class that defines the subclass of teh TestFixture. Use the '''CPPUNIT_TEST( ''test name'' )''' macro for each of the tests you want to run. Bracket these calls with '''CPPUNIT_TEST_SUITE( ''TestFixture name'' )''' and '''CPPUNIT_TEST_SUITE_END()''' As shown below. Only the tests listed will be run, so removing one from the list will suppress it needed. In addition to the '''CPPUNIT_TEST()''' macro there are two other macros that may be useful:
;CPPUNIT_TEST_FAIL( ''testMethod'' ) 
:A test that is expected to fail - this is deprecated. Use '''CPPUNIT_ASSERT_ASSERTION_FAIL()''' in the test method instead 
;CPPUNIT_TEST_EXCEPTION( ''testMethod'', ''ExceptionType'' )
:A test that is expected to throw a specific exception - this is deprecated. Use '''CPPUNIT_ASSERT_ASSERTION_FAIL()''' instead

See [http://cppunit.sourceforge.net/doc/cvs/group___writing_test_fixture.html Writing Test Fixture] for more information on these and other macros.

&lt;source lang="cpp"&gt;
        CPPUNIT_TEST_SUITE( AttrTableTest );

        CPPUNIT_TEST(clone_test);
        CPPUNIT_TEST(find_container_test);
        CPPUNIT_TEST(get_parent_test);
        CPPUNIT_TEST(recurrsive_find_test);
        CPPUNIT_TEST(find_test);
        CPPUNIT_TEST(copy_ctor);
        CPPUNIT_TEST(assignment);
        CPPUNIT_TEST(erase_test);
        CPPUNIT_TEST(names_with_spaces_test);
#if 0
        CPPUNIT_TEST(print_xml_test);
#endif

        CPPUNIT_TEST_SUITE_END();
&lt;/source&gt;

;CPPUNIT_TEST_SUITE_REGISTRATION( ''test class name'' )
:Use this after the close of the test class. This macro adds all of the tests in the TestFixture to the global registry. Code in ''main()'' will use this to bind the tests to an instance of ''TestRunner''. This macro follows the close of the TestFixture but should not be part of ''main()''. Also, if the TestFixture is in a namespace, this macro should be in the namespace, too.

=== Main ===

=== Building the code ===

&lt;font color="red"&gt;WARNING: Some of what follows is OLD and WRONG. Especailly the parts about running the tests by name.&lt;/font&gt;

== Running tests by name ==
To run a test by name, where 'test' means one of the methods in the TestFixture class, pass the method name to TestRunner::run(). For example, if you have a TestRunner named ''runner'', a TestFixture class named ''MyTests'' and it has methods ''void test_1() {}'' and ''void test_2() {}'', you would run those by calling ''runner.run("myTest::test_1")'' and ''runner.run(:myTes::test_2")''. This will work if the test source file uses the macro  ''CPPUNIT_TEST_SUITE( MyTest );'' to declare the TestFixure and ''CPPUNIT_TEST(test_1);'', ..., to declare the individual tests. Note that after the TestFixure class is defined, the macro ''CPPUNIT_TEST_SUITE_REGISTRATION(MyTest);'' must be used.

== Using command line switches to control output ==
Look in the example to see how I use Gnu's GetOpt to process command line options. In the code, '-d' is used to turn on debugging. When on, a static global is set to true and a macro writes various instrumentation to stderr. Here's the global (file scope) and macro:
&lt;source lang="cpp"&gt;
static bool debug = false;

#undef DBG
#define DBG(x) do { if (debug) (x); } while(false);
&lt;/source&gt;
The ''#undef DBG'' is there because the ''#define'' will redefine the ''DBG'' macro, changing it from the definition provided by ''debug.h''.

and the code to process the switch and call tests if they are named on the command line:

&lt;source lang="cpp"&gt;
int main(int argc, char*argv[]) {
    CppUnit::TextTestRunner runner;
    runner.addTest(CppUnit::TestFactoryRegistry::getRegistry().makeTest());

    GetOpt getopt(argc, argv, "d");
    char option_char;
    while ((option_char = getopt()) != EOF)
        switch (option_char) {
        case 'd':
            debug = 1;  // debug is a static global
            break;
        default:
            break;
        }

    bool wasSuccessful = true;
    string test = "";
    int i = getopt.optind;
    if (i == argc) {
        // run them all
        wasSuccessful = runner.run("");
    }
    else {
        while (i &lt; argc) {
            test = string("D4DimensionsTest::") + argv[i++];

            wasSuccessful = wasSuccessful &amp;&amp; runner.run(test);
        }
    }

    return wasSuccessful ? 0 : 1;
}
&lt;/source&gt;
The first loop processes the option; the if will call runner.run with "" which runs all the tests if there are no more arguments or will assume that remaining arguments are test names and will iterate over them, calling each in turn.


Note: The "-d" switch and calling the tests by name ''will not work with make''. You have to run the test code from the command line by hand. If your unit test file is named ''testy.cc'' the you'll need to change directory to the unit-tests dir and do a ''./testy -d testName'' to see the effects of these changes.

== Putting it all together ==

&lt;source lang="cpp"&gt;
#include "config.h"

#include &lt;cppunit/TextTestRunner.h&gt;
#include &lt;cppunit/extensions/TestFactoryRegistry.h&gt;
#include &lt;cppunit/extensions/HelperMacros.h&gt;

#include &lt;GetOpt.h&gt; // Part of libdap

//#define DODS_DEBUG

#include "D4Dimensions.h"
#include "XMLWriter.h"

#include "Error.h"
#include "debug.h"

#include "testFile.h"
#include "test_config.h"

using namespace CppUnit;
using namespace std;
using namespace libdap;

static bool debug = false;

#undef DBG
#define DBG(x) do { if (debug) (x); } while(false);

class D4DimensionsTest: public TestFixture {
private:
    XMLWriter *xml;
    D4Dimensions *d;

public:
    D4DimensionsTest() {
    }

    ~D4DimensionsTest() {
    }

    void setUp() {
        d = new D4Dimensions;
        xml = new XMLWriter;
    }

    void tearDown() {
        delete xml;
        delete d;
    }

    void test_print_copy_ctor() {
        d-&gt;add_dim_nocopy(new D4Dimension("first", 10));
        d-&gt;add_dim_nocopy(new D4Dimension("second", 100));
        d-&gt;add_dim_nocopy(new D4Dimension("third"));

        D4Dimensions lhs(*d);

        lhs.print_dap4(*xml);
        string doc = xml-&gt;get_doc();
        string baseline = readTestBaseline(string(TEST_SRC_DIR) + "/D4-xml/D4Dimensions_3.xml");
        DBG(cerr &lt;&lt; "test_print_copy_ctor: doc: " &lt;&lt; doc &lt;&lt; endl);
        DBG(cerr &lt;&lt; "test_print_copy_ctor: baseline: " &lt;&lt; baseline &lt;&lt; endl);
        CPPUNIT_ASSERT(doc == baseline);
    }

    CPPUNIT_TEST_SUITE( D4DimensionsTest );

        CPPUNIT_TEST(test_print_empty);

        // CPPUNIT_TEST_EXCEPTION( test_error, Error );
 
    CPPUNIT_TEST_SUITE_END();
};

CPPUNIT_TEST_SUITE_REGISTRATION(D4DimensionsTest);

int main(int argc, char*argv[]) {
    CppUnit::TextTestRunner runner;
    runner.addTest(CppUnit::TestFactoryRegistry::getRegistry().makeTest());

    GetOpt getopt(argc, argv, "d");
    char option_char;

    while ((option_char = getopt()) != EOF)
        switch (option_char) {
        case 'd':
            debug = 1;  // debug is a static global
            break;
        default:
            break;
        }

    bool wasSuccessful = true;
    string test = "";
    int i = getopt.optind;
    if (i == argc) {
        // run them all
        wasSuccessful = runner.run("");
    }
    else {
        while (i &lt; argc) {
            test = string("D4DimensionsTest::") + argv[i++];

            wasSuccessful = wasSuccessful &amp;&amp; runner.run(test);
        }
    }

    return wasSuccessful ? 0 : 1;
}
&lt;/source&gt;</text>
      <sha1>ae5naldn80a34ekzxn1enlunfpw5ei3</sha1>
    </revision>
  </page>
</mediawiki>
