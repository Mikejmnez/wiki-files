<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.11/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.11/ http://www.mediawiki.org/xml/export-0.11.xsd" version="0.11" xml:lang="en">
  <siteinfo>
    <sitename>OPeNDAP Documentation</sitename>
    <dbname>wikidb</dbname>
    <base>https://docs.opendap.org/index.php/Home</base>
    <generator>MediaWiki 1.38.4</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">OPeNDAP Documentation</namespace>
      <namespace key="5" case="first-letter">OPeNDAP Documentation talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Wiki Testing/ServerInstallationGuide4</title>
    <ns>0</ns>
    <id>202</id>
    <revision>
      <id>2111</id>
      <parentid>2110</parentid>
      <timestamp>2008-02-13T12:15:13Z</timestamp>
      <contributor>
        <username>Ndp</username>
        <id>2</id>
      </contributor>
      <comment>/* Installing the OPeNDAP Relational Database Server */</comment>
      <origin>2111</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="30220" sha1="4fqwzo1u6veupn84e7kjm67sv77klsm" xml:space="preserve">=Installing the OPeNDAP Relational Database Server=


The OPeNDAP Relational Database Server (DRDS) allows data managers to
serve data stored in relational DBMS systems, such as Oracle, SQL
Server, or mySQL.  The DRDS is written in Java, and uses the Java
Database Connectivity API (JDBC) to connect with the DBMS.

As of version 1.1, the DRDS cannot issue table join commands.  This
means it cannot serve multiple tables connected by common keys.  If
your DBMS supports views, you can use these to allow users to query
multiple tables.  If your DBMS does not support views, you need to put
your data into a single table to use DRDS.

Here is a brief description of how to set up the DRDS.  These instructions
are for DRDS version 1.1 and later.

There are a certain number of prerequisites.  The variety of
installations and software make it impossible to describe here how to
install these things and figure out the relevant parameters.
Nonetheless, they must be installed.  Though we can't offer
instruction, we can at least offer a checklist.  Here is a list of the
software that must be installed, and the parameters you must determine:


#Java.  You must have at least Java version 1.4.([[Wiki_Testing/ServerInstallationGuideFootnotes| 10]])
#Data in a database that supports Java Database Connectivity   (JDBC).  If your data is in multiple tables, you will need to   prepare a view of the data to be served.
#A web server that can execute servlets.  DRDS has been   extensively tested with the   [[http://jakarta.apache.org | Tomcat]] servlet engine, which can  be run either as a module to Apache, or by itself.\indc{Tomcat!Java     servlet engine}
#The JDBC client library (also called the "driver") for your   DBMS.  This is specific to the kind of DBMS.  That is, an Oracle   JDBC driver won't necessarily work with a MySQL DBMS.
#You must know the name of the driver.  This is a string of   characters identifying the particular JDBC driver in use.  For   Oracle, it reads something like this: &lt;font color='green'&gt;oracle.jdbc.driver.OracleDriver&lt;/font&gt;.
#Your DBMS must have a user with enough privilege to read data   from the network.  The DRDS is a read-only application, and cannot   issue commands that will try to change the data.
#You must know the "Connection URL" that will be used to   contact your DBMS.  This is a long and awkward-looking string that   identifies the machine, the driver, the port, and some other   information used by the JDBC driver to contact your DBMS.  For a   recent Oracle installation, the Connection URL looked like this:     &lt;pre&gt; jdbc:oracle:thin:@dods.org:1521:orcl     &lt;/pre&gt;    Figuring out the Connection URL will probably be the most   challenging part of installing DRDS.  It's not a great deal of help   to say so, but we're hoping to make up in sympathy what we cannot   offer in concrete assistance.

After you've checked off the items in this list, download the DRDS
distribution from the [[http://opendap.org| OPeNDAP Home] or the [[http://opendap.org/home/swJava1.1| OPeNDAP Java].  For a basic installation, you want the file called &lt;font color='green'&gt;dods.war&lt;/font&gt;.  To install the server, put this entire file into the "webapps" directory of your
servlet engine (e.g. Tomcat).  When you restart the servlet engine, it
will unpack the archive into the directory &lt;font color='green'&gt;webapps/dods&lt;/font&gt;. If you have
installed version 1.1.7 or newer, then the DODS Test Servlet (DTS) should
be running after you get your servlet engine restarted.
You should be able to access it at: &lt;font color='green'&gt;http://yourserver:port/dods/dts/&lt;/font&gt;

To configure the servlets, you'll need to edit the file
&lt;font color='green'&gt;webapps/dods/WEB-INF/web.xml&lt;/font&gt;.   This is described in the next
two sections.  After you finish editing the configuration file,
restart the servlet engine again, and the server should be running.

==General Servlet Configuration==
 
When installing a server, it's useful
to isolate the steps so you're not trying to tune several parameters
at the same time. To assist here, the DRDS comes with a test server
that invents data to return to a client requesting data. You can use
it to test your servlet engine and the servlet installation, without
taxing the JDBC drivers or your DBMS. We'll get to that in a moment,
first let's review some aspects of the Servlet configuration that are
common to all DODS servlets.


The OPeNDAP servlets get their configuration from the servlet's &lt;font color='green'&gt;web.xml&lt;/font&gt;
 file. The default location of the &lt;font color='green'&gt;web.xml&lt;/font&gt; file is (at least in Tomcat 4.1) in &lt;font color='green'&gt;&amp;#36;TOMCAT_HOME/webapps/dods/WEB-INF&lt;/font&gt; (Obviously if the dods directory
 gets renamed then things change accordingly.)

Each instance of a servlet running in the opendap servlet area needs an entry in
the &lt;font color='green'&gt;web.xml&lt;/font&gt; file. Multiple instances of a servlet and/or several different servlets
can be configured in the one &lt;font color='green'&gt;web.xml&lt;/font&gt; file. For instance you can have a DTS
and 2 instances of the DRDS configured through one &lt;font color='green'&gt;web.xml&lt;/font&gt; file.

Each instance of a servlet needs a unique name which is specified inside a
&lt;font color='green'&gt;&lt;servlet&gt;&lt;/font&gt; element in the &lt;font color='green'&gt;web.xml&lt;/font&gt; file using the &lt;font color='green'&gt;&lt;servlet-name&gt;&lt;/font&gt; tag.
This is a name of convenience, for example if you where serving data from an
ARGOS satellite you might call that servlet argos.

Additionally each instance of a &lt;font color='green'&gt;&lt;servlet&gt;&lt;/font&gt; must specify which Java class
contains the actual servlet to run. This is done in the &lt;font color='green'&gt;&lt;servlet-class&gt;&lt;/font&gt;
element. For example the DRDS's class name is &lt;font color='green'&gt;opendap.servers.sql.drds&lt;/font&gt;

Here is a syntax example combining the two previous example values:

&lt;pre&gt;
&lt;servlet&gt;
    &lt;servlet-name&gt;argos&lt;/servlet-name&gt;
    &lt;servlet-class&gt;opendap.servers.sql.drds&lt;/servlet-name&gt;
    .
    .
    .
&lt;/servlet&gt;
&lt;/pre&gt;

This servlet could then be accessed as:


&lt;pre&gt;
http://hostname/opendap/servlet/argos
&lt;/pre&gt;

You may also add to the end of the web.xml file a set of &lt;font color='green'&gt;&lt;servlet-mapping&gt;&lt;/font&gt;
elements. These allow you to abbreviate the URL or the servlet. By placing the
servlet mappings:

&lt;pre&gt;
 &lt;servlet-mapping&gt;
    &lt;servlet-name&gt;argos&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/argos&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;argos&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/argos/*&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
&lt;/pre&gt;

At the end of the web.xml file our previous example changes it's URL to:

&lt;pre&gt;
http://hostname/opendap/argos
&lt;/pre&gt;

Eliminating the need for the word servlet in the URL. For more on the
&lt;font color='green'&gt;&lt;servlet-mapping&gt;&lt;/font&gt; element see the Jakarta-Tomcat documentation.


=== &lt;font color='green'&gt;&lt;&lt;/font&gt;init-param&lt;font color='green'&gt;&gt;&lt;/font&gt; Elements===

The OPeNDAP servlets use &lt;font color='green'&gt;&lt;init-param&gt;&lt;/font&gt; elements inside of each
&lt;font color='green'&gt;&lt;servlet&gt;&lt;/font&gt; element to get specific configuration information.

&lt;font color='green'&gt;&lt;init-param&gt;&lt;/font&gt;'s common to all OPeNDAP servlets are:



*&lt;font color='green'&gt;DebugOn&lt;/font&gt; - This controls output to the terminal from which the servlet  engine was launched. The value is a list of flags that turn on debugging  instrumentation in different parts of the code. Common values are: &lt;font color='green'&gt;showRequest&lt;/font&gt;,  &lt;font color='green'&gt;showResponse&lt;/font&gt;, &lt;font color='green'&gt;showException&lt;/font&gt;, and &lt;font color='green'&gt;probeRequest&lt;/font&gt;.  Other debugging values that are specific to each servlet should be documented  in each servlets javadoc documentation.   Example: 
&lt;pre&gt;     
&lt;init-param&gt;      
   &lt;param-name&gt;DebugOn&lt;/param-name&gt;      
   &lt;param-value&gt;showRequest showResponse&lt;/param-value&gt;     
&lt;/init-param&gt; 
&lt;/pre&gt;    

''Default'' : If this parameter is not set, or the value field is empty then  debugging instrumentation is not turned on.
*&lt;font color='green'&gt;DDScache&lt;/font&gt; - This is should be set to the directory containing the DDS  files for the data sets used by the servlet. Some servlets have been developed  that do not use DDS's that are cached on the disk, however the default behavior  is for the servlet to load DDS images from disk.  Example: 
&lt;pre&gt;     
&lt;init-param&gt;      
   &lt;param-name&gt;DDScache&lt;/param-name&gt;      
   &lt;param-value&gt;/usr/OPeNDAP/sdds-testsuite/dds/&lt;/param-value&gt;     
&lt;/init-param&gt; 
&lt;/pre&gt;  
''Default'' : If this parameter is not set (does not appear in as an &lt;font color='green'&gt;&lt;init-param&gt;&lt;/font&gt;)  then it is set to &lt;font color='green'&gt;&amp;#36;TOMCATHOME/webapps/opendap/datasets/servlet-name/dds&lt;/font&gt;  (where servlet-name is the same as the name specified in the &lt;font color='green'&gt;&lt;servlet-name&gt;&lt;/font&gt;  element of the servlet configuration)
*&lt;font color='green'&gt;DAScache&lt;/font&gt; - This is should be set to the directory containing the DAS files  for the data sets used by the servlet. Some servlets have been developed that do  not use DAS's that are cached on the disk, however the default behavior is for the  servlet to load DAS images from disk.  Example: 
&lt;pre&gt;     
&lt;init-param&gt;      
   &lt;param-name&gt;DAScache&lt;/param-name&gt;     
   &lt;param-value&gt;/usr/OPeNDAP/sdds-testsuite/das/&lt;/param-value&gt;     
&lt;/init-param&gt; 
&lt;/pre&gt;  

''Default'' : If this parameter is not set (does not appear in as an &lt;font color='green'&gt;&lt;init-param&gt;&lt;/font&gt;)  then it is set to &lt;font color='green'&gt;&amp;#36;TOMCATHOME/webapps/opendap/datasets/servlet-name/das&lt;/font&gt;  (where servlet-name is the same as the name specified in the &lt;font color='green'&gt;&lt;servlet-name&gt;&lt;/font&gt;  element of the servlet configuration) .
*&lt;font color='green'&gt;INFOcache&lt;/font&gt; - This is should be set to the directory containing the files used  by the ".info" service for the servlet. This directory should contain any data set specific  "over-ride" files (see below), any data set specific additional information files (see below),  and any servlet specific information files(see below).  Example: 

&lt;pre&gt;     
&lt;init-param&gt;       
  &lt;param-name&gt;INFOcache&lt;/param-name&gt;       
  &lt;param-value&gt;/usr/OPeNDAP/sdds-testsuite/info/&lt;/param-value&gt;     
&lt;/init-param&gt; 
&lt;/pre&gt;  

''Default'' : If this parameter is not set (does not appear in as an &lt;font color='green'&gt;&lt;init-param&gt;&lt;/font&gt;)  then it is set to &lt;font color='green'&gt;&amp;#36;TOMCATHOME/webapps/opendap/datasets/servlet-name/info&lt;/font&gt;  (where servlet-name is the same as the name specified in the &lt;font color='green'&gt;&lt;servlet-name&gt;&lt;/font&gt; element  of the servlet configuration)

==DODS Test Server (DTS)==

''classname'' : &lt;font color='green'&gt;dods.servers.test.dts&lt;/font&gt;

This servlet is primarily used to test the core code (in particular the DAP). This servlet
will take any DDS in it's &lt;font color='green'&gt;DDScache&lt;/font&gt; and populate it with invented data per client
request. This allows the testing of unusual DDS structures. By default the DTS will
look in these locations:

&lt;pre&gt;
$TOMCAT_HOME/webapps/dods/datasets/dts/dds
$TOMCAT_HOME/webapps/dods/datasets/dts/das
$TOMCAT_HOME/webapps/dods/datasets/dts/info
&lt;/pre&gt;

For files containing DDS, DAS, and ancillary information. These directories come full
of test dataset descriptions and metadata in the distribution (1.1.7 or higher). If the
&lt;font color='green'&gt;web.xml&lt;/font&gt; file entry for the DTS contains entries for any of the &lt;font color='green'&gt;DDScache&lt;/font&gt;,
&lt;font color='green'&gt;DAScache&lt;/font&gt;, or the &lt;font color='green'&gt;INFOcache&lt;/font&gt; directories then the DTS will look there
instead of in the defalut location(s).




===DTS Configuration===

The DTS comes configured to startup the first time the servlet's Web Archive File
(WAR file) is unpacked by Tomcat. You may wish to change the length of the
returned Sequences via the information below, but it is not neccessary.

&lt;font color='green'&gt;&lt;init-param&gt;&lt;/font&gt;'s unique to the DTS:


*&lt;font color='green'&gt;SequenceLength&lt;/font&gt; - This &lt;font color='green'&gt;&lt;init-param&gt;&lt;/font&gt; sets the number of rows each  Sequence returned by the DTS will have. Common values are typically small  (5-100) for simple testing. If you are to testing client code against the DTS you  may wish to use a large value (&lt;font color='green'&gt;&gt;&lt;/font&gt;50000) here to check the client's ability to  handle large Sequences.   Example: 

&lt;pre&gt; &lt;init-param&gt;  
  &lt;param-name&gt;SequenceLength&lt;/param-name&gt;      
  &lt;param-value&gt;100&lt;/param-value&gt; 
&lt;/init-param&gt; 
&lt;/pre&gt;      

''Default'' : Is set to 5 if this parameter is not set (does not appear in as an  &lt;font color='green'&gt;&lt;init-param&gt;&lt;/font&gt;).
*&lt;font color='green'&gt;DebugOn&lt;/font&gt; - There are no DTS specific values for this &lt;font color='green'&gt;&lt;init-param&gt;&lt;/font&gt;.


Example of web.xml content:

&lt;pre&gt;
&lt;servlet&gt;
        &lt;servlet-name&gt;
                dts
        &lt;/servlet-name&gt;
        &lt;servlet-class&gt;
                dods.servers.test.dts
        &lt;/servlet-class&gt;
        &lt;init-param&gt;
                &lt;param-name&gt;DebugOn&lt;/param-name&gt;
                &lt;param-value&gt;showRequest showResponse &lt;/param-value&gt;
        &lt;/init-param&gt;
                &lt;param-name&gt;SequenceLength&lt;/param-name&gt;
                &lt;param-value&gt;showRequest showResponse &lt;/param-value&gt;
        &lt;/init-param&gt;
                &lt;param-name&gt;SequenceLength&lt;/param-name&gt;
                &lt;param-value&gt;100&lt;/param-value&gt;
        &lt;/init-param&gt;
&lt;/servlet&gt;
&lt;/pre&gt;

In this example SequenceLength gets set to 100.

==DODS Relational Database Server (DRDS)==

''classname'' : &lt;font color='green'&gt;dods.servers.sql.drds&lt;/font&gt;

This DODS server serves data from a relational database to DODS clients.

The DRDS uses the JDBC interface to connect to the database. This means
that to use this server you will need to locate and install JDBC drivers for your
database system. (This requirement is for the server only, the DODS clients
that use the server need know nothing about JDBC or SQL). Here are some
links that should lead you to the JDBC support pages for some of the more
common RDBM's:


#MySQL JConnector Site: 
[http://www.mysql.com/products/connector/j/index.html &lt;cite&gt;http://www.mysql.com/products/connector/j/index.html&lt;/cite&gt;]
#PostgreSQL JDBC site: [http://jdbc.postgresql.org/&lt;cite&gt;http://jdbc.postgresql.org/&lt;/cite&gt;] Additional PostgreSQL JDBC docs: [http://developer.postgresql.org/docs/postgres/jdbc.html&lt;cite&gt;http://developer.postgresql.org/docs/postgres/jdbc.html&lt;/cite&gt;]
#Oracle's SQLJ, JDBC, \&amp; JPublisher site:  [http://www.oracle.com/technology/tech/java/sqlj_jdbc/index.html&lt;cite&gt;http://www.oracle.com/technology/tech/java/sqlj_jdbc/index.html&lt;/cite&gt;]
#Informix JDBC Drivers site:  [http://www-306.ibm.com/software/data/informix/tools/jdbc/&lt;cite&gt;http://www-306.ibm.com/software/data/informix/tools/jdbc/&lt;/cite&gt;]


Most modern database vendors usually provide JDBC drivers for their product.
The glaring exception has been Microsoft, which isn't surprising as they have
made no bones about wanting to kill Java. As of the release of MSSQL-Server 2000,
Microsoft appears to be offering a JDBC driver for Win2000/XP systems. I have
developed using MSSQL-Server for some time (still do actually.) and I have been
using a purchased set of drivers from DataDirect Technologies (formerly known as
Merant DataDirect). I am using their "SequeLink" product and it's been working great.
Find it, and the Microsoft stuff, at the following links:


#Microsoft SQL-Server 2000 JDBC Drivers: [[http://www.microsoft.com/downloads/details.aspx?FamilyID=86212d54-8488-481d-b46b-af29bb18e1e5\&amp;DisplayLang=en&lt;cite&gt; http://www.microsoft.com/&lt;/cite&gt;]]
#Data Direct Technologies:  [[http://www.datadirect.com/index.ssp&lt;cite&gt;http://www.datadirect.com/index.ssp&lt;/cite&gt;]]

In this release the DRDS does not support SQL JOIN operations. Each database
table must appear as a DODS Sequence data type in its own DDS file. If your
data crosses multiple tables then you will need to make a "view" or a "virtual table"
in the database in order to serve the data with the DRDS. This situation will improve
in the next major revision. (I have an as yet un-implemented plan to allow the DRDS
to support SQL JOIN operations.)


===DRDS Datatype Translation===

Since the DRDS is reading data from a relational database through a JDBC connection
it is important to note that their are several layers of type translation happening in this:

Database &lt;font color='green'&gt;-&gt;&lt;/font&gt; JDBC &lt;font color='green'&gt;-&gt;&lt;/font&gt; Java &lt;font color='green'&gt;-&gt;&lt;/font&gt; DAP2

The Database types are the native types for the particular database that is being read from.
The translation from Database&lt;font color='green'&gt;-&gt;&lt;/font&gt;JDBC is handled before we get to the data (most likely
by the JDBC Drivers). Our mapping of JDBC type to DAP2 types (the intermediate Java
types happen in the process) can be seen in  \tableref{tab,jdbc-mapping}. The mappings
are handled in the read() method for each of the corresponding DAP2 data types.


===DRDS Configuration===


To install the real data in your servlet engine, you will have to complete the installation
of JDBC, make sure your DBMS is correctly configured, and reconfigure the DRDS
to use the JDBC library to find your data. Before starting this part, make sure that the
JDBC drivers are properly installed.

Next modify your web.xml to include the &lt;init-param&gt; elements listed below. Look
carefully at the example web.xml section provided below.

&lt;font color='green'&gt;&lt;init-param&gt;&lt;/font&gt;'s unique to the DRDS:

*&lt;font color='green'&gt;JDBCdriver&lt;/font&gt; - This must be set to the fully qualified Java class name of the  JDBC drivers that the servlet is to use to make the JDBC connection to the DBMS.  In my servlet that is using the Merant DataDirect JDBC drivers the class name of  the JDBC driver is com.merant.sequelink.jdbc.SequeLinkDriver  Example: 

&lt;pre&gt;     
&lt;init-param&gt;         
   &lt;param-name&gt;JDBCDriver&lt;/param-name&gt;       
   &lt;param-value&gt;com.merant.sequelink.jdbc.SequeLinkDriver&lt;/param-value&gt;     
&lt;/init-param&gt; 
&lt;/pre&gt;            

''Default'' : This is a required &lt;font color='green'&gt;&lt;init-param&gt;&lt;/font&gt;, there is no default value.
*&lt;font color='green'&gt;JDBCconnectionURL&lt;/font&gt; - This is the connection URL (aka the connection  string) that the DRDS is to use to connect to to the DBMS. This is usually defined  by the developers of the JDBC driver. Read the documentation for the JDBC driver that you are using. It is not always easy to ascertain for a particular installation. For  example, in my server that is using the Data Direct drivers the value is set to:  &lt;font color='green'&gt;    jdbc:sequelink://sugar.oce.orst.edu:19996&lt;/font&gt;   If you are stumped get in touch with  me(ndp@coas.oregonstate.edu) and I'll try to help.  Example:  

&lt;pre&gt;     
&lt;init-param&gt;      
   &lt;param-name&gt;JDBCconnectionURL&lt;/param-name&gt;      
   &lt;param-value&gt;jdbc:sequelink://foogoo.oce.orst.edu:18796&lt;/param-value&gt;     
&lt;/init-param&gt; 
&lt;/pre&gt;            

''Default'' : This is a required &lt;font color='green'&gt;&lt;init-param&gt;&lt;/font&gt;, there is no default value.
*&lt;font color='green'&gt;JDBCusername&lt;/font&gt; - This is the user name for the DBMS that the JDBC connection  will be made under. This is often set to "guest".  Example:  

&lt;pre&gt;     
&lt;init-param&gt;       
  &lt;param-name&gt;JDBCusername&lt;/param-name&gt;       
  &lt;param-value&gt;guest&lt;/param-value&gt;     
&lt;/init-param&gt; 
&lt;/pre&gt;            

''Default'' : This is a required &lt;font color='green'&gt;&lt;init-param&gt;&lt;/font&gt;, there is no default value.
*&lt;font color='green'&gt;JDBCpassword&lt;/font&gt; - The password associated with the above username. This is  stored as simple text, so make sure that the JDBC user doesn't have any significant  privileges! If there is no password required, you must still set the this &lt;font color='green'&gt;&lt;init-param&gt;&lt;/font&gt;,  just leave the value element empty.  Example:  

&lt;pre&gt;     
&lt;init-param&gt;       
  &lt;param-name&gt;JDBCpassword&lt;/param-name&gt;       
  &lt;param-value&gt;abracadabra&lt;/param-value&gt;     
&lt;/init-param&gt; 
&lt;/pre&gt;            

''Default'' : This is a required &lt;font color='green'&gt;&lt;init-param&gt;&lt;/font&gt;, there is no default value.
*&lt;font color='green'&gt;JDBCMaxResponseLength&lt;/font&gt; - This limits the number of lines that the DRDS will for a  given client request. For debugging I use 300. For production I use 300000. Your  milage may vary depending on the amount of memory resources available. You may   wish to perform some testing on your server to establish an appropriate value.   ''Warning: Small values may lead to incomplete returns from queries.''   Example:  

&lt;pre&gt;     
&lt;init-param&gt;       
  &lt;param-name&gt;JDBCMaxResponseLength&lt;/param-name&gt;       
  &lt;param-value&gt;50000&lt;/param-value&gt;     
&lt;/init-param&gt; 
&lt;/pre&gt;            

''Default'' : : If this parameter is not set (does not appear in as an  &lt;font color='green'&gt;&lt;init-param&gt;&lt;/font&gt;)  then it is set to 100.
*&lt;font color='green'&gt;UseDatasetName&lt;/font&gt; - This is a (probably temporary) hack. Some databases (in particular  MS-SQL Server 7.0) require that the database name and the owner of the database be  specified in every variable and table name. This is awkward for the current implementation  of the DRDS. The work around is to name the data set (in the DDS file) with the database  name and owner name of the table being served. For example in one data set that I server  the database name is "EOSDB" and the owner of the database is "DBO". I set the &lt;font color='green'&gt;&lt;init-param&gt;&lt;/font&gt;  UseDatasetName then I define the DDS as follows:  

&lt;pre&gt;     
Dataset {         
    Sequence {
             Float64 battery;
             Float64 checksum;
             Float64 data_age;
         } Drifters;
     } EOSDB.DBO;  
&lt;/pre&gt;      

Thus the hack is invoked. It doesn't matter if the value of this init-param is empty (although  if it's not you should set it to "true"), it simply needs to appear in the &lt;font color='green'&gt;web.xml&lt;/font&gt; file.If you don't  want to use this hack then DO NOT even included the init-param "UseDatasetName" in the  &lt;font color='green'&gt;web.xml&lt;/font&gt; entry for the DRDS.   Example:  
&lt;pre&gt;
     &lt;init-param&gt;
         &lt;param-name&gt;JDBCDriver&lt;/param-name&gt;
         &lt;param-value&gt;com.merant.sequelink.jdbc.SequeLinkDriver&lt;/param-value&gt;
     &lt;/init-param&gt; 
&lt;/pre&gt;          

''Default'' : If this  &lt;font color='green'&gt;&lt;init-param&gt;&lt;/font&gt; does not appear in the configuration then the hack is not invoked..
*&lt;font color='green'&gt;DebugOn&lt;/font&gt; - Values specific to the DRDS are: &lt;font color='green'&gt;JDBC&lt;/font&gt;

Example of web.xml content:

&lt;pre&gt;
&lt;servlet&gt;
    &lt;servlet-name&gt;
        drds
    &lt;/servlet-name&gt;
    &lt;servlet-class&gt;
        dods.servers.sql.drds
    &lt;/servlet-class&gt;
    &lt;init-param&gt;
        &lt;param-name&gt;JDBCdriver&lt;/param-name&gt;
        &lt;param-value&gt; com.merant.sequelink.jdbc.SequeLinkDriver&lt;/param-value&gt;
    &lt;/init-param&gt;
    &lt;init-param&gt;
        &lt;param-name&gt;JDBCconnectionURL&lt;/param-name&gt;
        &lt;param-value&gt;jdbc:sequelink://sugar:19996&lt;/param-value&gt;
    &lt;/init-param&gt;
    &lt;init-param&gt;
        &lt;param-name&gt;JDBCusername&lt;/param-name&gt;
        &lt;param-value&gt;guest&lt;/param-value&gt;
    &lt;/init-param&gt;
    &lt;init-param&gt;
        &lt;param-name&gt;JDBCpassword&lt;/param-name&gt;
        &lt;param-value&gt;&lt;/param-value&gt;
    &lt;/init-param&gt;
    &lt;init-param&gt;
        &lt;param-name&gt;JDBCMaxResponseLength&lt;/param-name&gt;
        &lt;param-value&gt;300&lt;/param-value&gt;
    &lt;/init-param&gt;
    &lt;init-param&gt;
        &lt;param-name&gt;UseDatasetName&lt;/param-name&gt;
        &lt;param-value&gt;&lt;/param-value&gt;
    &lt;/init-param&gt;
    &lt;init-param&gt;
        &lt;param-name&gt;INFOcache&lt;/param-name&gt;
        &lt;param-value&gt;/usr/Java-DODS/sdds-testsuite/info/&lt;/param-value&gt;
    &lt;/init-param&gt;
    &lt;init-param&gt;
        &lt;param-name&gt;DDScache&lt;/param-name&gt;
        &lt;param-value&gt;/usr/Java-DODS/sdds-testsuite/dds/&lt;/param-value&gt;
    &lt;/init-param&gt;
    &lt;init-param&gt;
        &lt;param-name&gt;DAScache&lt;/param-name&gt;
        &lt;param-value&gt;/usr/Java-DODS/sdds-testsuite/das/&lt;/param-value&gt;
    &lt;/init-param&gt;
    &lt;init-param&gt;
        &lt;param-name&gt;DebugOn&lt;/param-name&gt;
        &lt;param-value&gt;showRequest showResponse JDBC&lt;/param-value&gt;
    &lt;/init-param&gt;
&lt;/servlet&gt;
&lt;/pre&gt;



===Configure the Table Data Types===

Each database table (including table "views") you wish to serve must
be described with a DDS and DAS.  Optionally, you may also include
an "info" message to provide information to users about the source
and quality of the data provided, as well as restrictions on its use.
These structures are contained in text files that must be tailored to
each table to be served.



Here is an example using a table called "b31" that is defined like
this (using Oracle):

&lt;center&gt;
{|border="3"
! Name !! Null? !! Type
|-
| &lt;font color='green'&gt;ID&lt;/font&gt; ||     &lt;font color='green'&gt;NOT NULL&lt;/font&gt; || &lt;font color='green'&gt;NUMBER&lt;/font&gt;
|-
| &lt;font color='green'&gt;CLASS&lt;/font&gt; ||  &lt;font color='green'&gt;NOT NULL&lt;/font&gt; || &lt;font color='green'&gt;CHAR(1)&lt;/font&gt;
|-
| &lt;font color='green'&gt;TEXT&lt;/font&gt; ||  &lt;font color='green'&gt;NOT NULL&lt;/font&gt; || &lt;font color='green'&gt;VARCHAR(270)&lt;/font&gt;

|}
&lt;/center&gt;

 
First, determine the DAP data types that correspond with the JDBC
data types (see the data type mapping in
\tableref{tab,jdbc-mapping}). These mappings are used to
create a DDS.  In the cache directories defined in the servlet's
&lt;font color='green'&gt;web.xml&lt;/font&gt; file, create the files &lt;font color='green'&gt;dds/b31&lt;/font&gt; (see the example
DDS below), &lt;font color='green'&gt;das/b31&lt;/font&gt; (see the example DAS below), and
&lt;font color='green'&gt;info/b31&lt;/font&gt; (if desired).

&lt;center&gt;
{|border="3"
! JDBC Data Type !! DAP2 Data Type
|-
|     &lt;font color='green'&gt;TINYINT&lt;/font&gt; ||     &lt;font color='green'&gt;Byte&lt;/font&gt;
|- 
|     &lt;font color='green'&gt;SMALLINT&lt;/font&gt; ||      &lt;font color='green'&gt;Int16&lt;/font&gt;
|-
|      &lt;font color='green'&gt;INTEGER&lt;/font&gt; ||       &lt;font color='green'&gt;Int32&lt;/font&gt;
|-
|      &lt;font color='green'&gt;BIGINT&lt;/font&gt; ||       No sensible mapping.  Use &lt;font color='green'&gt;Int32&lt;/font&gt;.
|-
|      &lt;font color='green'&gt;REAL&lt;/font&gt; ||         &lt;font color='green'&gt;Float32&lt;/font&gt;
|-
|      &lt;font color='green'&gt;FLOAT&lt;/font&gt; ||         &lt;font color='green'&gt;Float64&lt;/font&gt;
|-
|      &lt;font color='green'&gt;DOUBLE&lt;/font&gt; ||       &lt;font color='green'&gt;Float64&lt;/font&gt;
|-
|      &lt;font color='green'&gt;DECIMAL&lt;/font&gt; ||       No sensible mapping.  Use &lt;font color='green'&gt;Float64&lt;/font&gt;
|-
|     &lt;font color='green'&gt;NUMERIC&lt;/font&gt; ||        No sensible mapping.  Use &lt;font color='green'&gt;Float64&lt;/font&gt;
|-
|     &lt;font color='green'&gt;BIT&lt;/font&gt; ||            &lt;font color='green'&gt;Boolean&lt;/font&gt;
|-
|     &lt;font color='green'&gt;CHAR&lt;/font&gt; ||           &lt;font color='green'&gt;String&lt;/font&gt;
|-
|     &lt;font color='green'&gt;VARCHAR&lt;/font&gt; ||        &lt;font color='green'&gt;String&lt;/font&gt;
|-
|     &lt;font color='green'&gt;LONGVARCHAR&lt;/font&gt; ||    &lt;font color='green'&gt;Array&lt;/font&gt;(of bytes)
|-
|     &lt;font color='green'&gt;BINARY&lt;/font&gt; ||         &lt;font color='green'&gt;Array&lt;/font&gt;(of bytes)
|-
|     &lt;font color='green'&gt;VARBINARY&lt;/font&gt; ||      &lt;font color='green'&gt;Array&lt;/font&gt;(of bytes)
|-
|     &lt;font color='green'&gt;LONGVARBINARY&lt;/font&gt; ||  &lt;font color='green'&gt;Array&lt;/font&gt;(of bytes)
|-
|     &lt;font color='green'&gt;DATE&lt;/font&gt; ||           &lt;font color='green'&gt;String&lt;/font&gt;
|-
|     &lt;font color='green'&gt;TIME&lt;/font&gt; ||           &lt;font color='green'&gt;String&lt;/font&gt;
|-
|     &lt;font color='green'&gt;TIMESTAMP&lt;/font&gt; ||     &lt;font color='green'&gt;String&lt;/font&gt;
|}

    Mapping from JDBC Data Types to DAP2 Data Types

&lt;/center&gt;

&lt;blockquote&gt;The data types described in \tableref{tab,jdbc-mapping} are only
  the primitive data types (except for Array). DAP2 supports more
  sophisticated data types: Grids, Arrays, Structures, and Sequences,
  among others For information about all these, refer to the
  \DODSuser.&lt;/blockquote&gt;

====Make a DDS====



In a file named for your table, in the directory nominated by the
&lt;font color='green'&gt;dds_cache_dir&lt;/font&gt; directive in the &lt;font color='green'&gt;web.xml&lt;/font&gt; file, put a DDS for your table.  This
must contains declarations for each of the data types you expect a
user to ask for (or select over).  The fields you don't list are
effectively invisible to the user of the DRDS.  Use
\tableref{tab,jdbc-mapping} to determine the data types that
most closely correspond to the data in your tables.

 
The data served from a DRDS server is always enclosed in a DAP2 data
type called a "Sequence."  Each instance of a Sequence corresponds
to one row of a relational table.  In effect, the DDS declares the
data types and arrangement of the table columns.  For more information
about what the DDS is, see \DODSuser.   There is also a very cursory
introduction to these structures in \DODSquick.

&lt;blockquote&gt;NOTE: When writing your DDS, be sure the name of the top-level
  sequence matches the database table name. It is the sequence name,
  rather than the dataset name, that is used in the SQL statement that
  will be submitted to your DBMS.&lt;/blockquote&gt;

For our example server, we would create a file called "b31," and put
it in the &lt;font color='green'&gt;dds_cache_dir&lt;/font&gt;.  The file contents would look like
this:

&lt;pre&gt;
Dataset {
  Sequence {
    Int16 id;
    String class;
    String text;
  } b31;  # Sequence name
} b31;    # Dataset name
&lt;/pre&gt;

====Make a DAS====

Making a DAS is precisely comparable to the DDS.  Make a file called
"b31," and put it in the &lt;font color='green'&gt;das_cache_dir&lt;/font&gt;.  Here's the DAS for
our example.

&lt;pre&gt;
Attributes {
  b31 {
    id {
      String long_name "Id";
    }
    class {
      String long_name "class";
    }
    text {
      String long_name "text";
    }
  }
}
&lt;/pre&gt;



====Make an Info File====


This is entirely optional, but it can be helpful to users who want to
know more about your data.  Create a file with HTML in it
(without the HTML or BODY tags), and put it in the
&lt;font color='green'&gt;info_cache_dir&lt;/font&gt; directory with the same name as the DDS and DAS
files, it will be served to the user when they make an info request.
See \DODSquick for information about the contents of the info
response.

====Done====
 
You should now be done installing the DRDS.  The URL for this server
should be the same as the URL for the test server, using the "drds"
directory instead of "dts," per the &lt;font color='green'&gt;servlet-mapping&lt;/font&gt; direction
in the &lt;font color='green'&gt;web.xml&lt;/font&gt; file.  (See ([[Wiki_Testing/ServerInstallationGuide4|Section 4.3.2]]).)
This should bring up a list of datasets you can select from.</text>
      <sha1>4fqwzo1u6veupn84e7kjm67sv77klsm</sha1>
    </revision>
  </page>
</mediawiki>
