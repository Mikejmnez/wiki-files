<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.11/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.11/ http://www.mediawiki.org/xml/export-0.11.xsd" version="0.11" xml:lang="en">
  <siteinfo>
    <sitename>OPeNDAP Documentation</sitename>
    <dbname>wikidb</dbname>
    <base>https://docs.opendap.org/index.php/Home</base>
    <generator>MediaWiki 1.38.4</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">OPeNDAP Documentation</namespace>
      <namespace key="5" case="first-letter">OPeNDAP Documentation talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Using lambdas with the STL</title>
    <ns>0</ns>
    <id>1026</id>
    <revision>
      <id>13501</id>
      <parentid>13379</parentid>
      <timestamp>2023-10-16T16:50:24Z</timestamp>
      <contributor>
        <username>Jimg</username>
        <id>3</id>
      </contributor>
      <minor/>
      <origin>13501</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1923" sha1="a1rqywy6dojirxq6ug0refps2wvtlua" xml:space="preserve">= Using lambdas with the STL =

Let's say you want to find the first instance of the variable named 'name' in one of our containers. The thing in the container is not a string, but a complex object with lots of fields, one of which happens to be a string that holds the name of the object. Here's the old, pre-c++-11 way using a function that returns a boolean and some adapters like bind2nd() and ptr_fun(). 

Change code like:

&lt;pre&gt;
 // Note that in order for this to work the second argument must not be a reference.
 // jhrg 8/20/13
 static bool
 name_eq(D4Group *g, const string name)
 {
	return g-&gt;name() == name;
 }

 groupsIter g = find_if(grp_begin(), grp_end(), bind2nd(ptr_fun(name_eq), grp_name));
&lt;/pre&gt;

to:
&lt;pre&gt;
 auto g = find_if(grp_begin(), grp_end(), [name](const D4Group *g) { return g-&gt;name() == name; });
                                           ^     ^                                       ^
                                           1     2                                       3
&lt;/pre&gt;

Where ''[name](const D4Group *g) { return g-&gt;name() == name; }'' is a C++ Lambda function (an anonymous function).
This lambda function use uses a 'capture.' The square braces at #1 name the captured variable. Its value is taken from the current environment when the lambda is instantiated at runtime and used at #3 in the function.
At #2 the argument to the lambda function is declared as a ''const pointer'' so the compiler knows the function won't be modifying the object.
C++ STL functions like ''find_if()'' take predicates (which this lambda function is) and that can streamline code quite a bit.

The return value from find_if(...) is the iterator that references the first instance in the D4Group with a name that matches ''name''.

Note that there a many algorithms in the STL that can perform operations like searching on all the elements of a container given the beginning and ending iterators.</text>
      <sha1>a1rqywy6dojirxq6ug0refps2wvtlua</sha1>
    </revision>
  </page>
</mediawiki>
