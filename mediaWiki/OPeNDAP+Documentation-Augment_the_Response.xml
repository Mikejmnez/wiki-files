<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.11/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.11/ http://www.mediawiki.org/xml/export-0.11.xsd" version="0.11" xml:lang="en">
  <siteinfo>
    <sitename>OPeNDAP Documentation</sitename>
    <dbname>wikidb</dbname>
    <base>https://docs.opendap.org/index.php/Home</base>
    <generator>MediaWiki 1.38.4</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">OPeNDAP Documentation</namespace>
      <namespace key="5" case="first-letter">OPeNDAP Documentation talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Augment the Response</title>
    <ns>0</ns>
    <id>469</id>
    <revision>
      <id>3825</id>
      <parentid>3824</parentid>
      <timestamp>2009-04-23T23:23:07Z</timestamp>
      <contributor>
        <username>Jimg</username>
        <id>3</id>
      </contributor>
      <comment>/* Organization of Instances in Memory */</comment>
      <origin>3825</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3213" sha1="gzpk222idgvandciu858fvxm16xivdy" xml:space="preserve">Back: [[AIS Using NcML]]

== Organization of Instances in Memory ==
Object diagram: [[Image:NcML_Object_diagram_1.png|thumb|right|400px|An object diagram showing an example of a DDS, its child BaseType instances and their child AttrTable instances. This is collection of C++ object instances that is represented by the 
DAP's DDX response.]]
A [http://docs.opendap.org/images/8/86/NcML_Object_diagram_1.png high resolution] version of the figure to the right.

The object diagram to the right shows the organization in memory of class instances that corresponds to a fictitious data set. The [http://www.opendap.org/api/pref/html/classlibdap_1_1DDS.html DDS] instance is the root of the data set and contains its name. Each variable in the data set is represented by an instance of a class that is a child of [http://www.opendap.org/api/pref/html/classlibdap_1_1BaseType.html BaseType]. In the picture, I used [http://www.opendap.org/api/pref/html/classlibdap_1_1Array.html Array] and [http://www.opendap.org/api/pref/html/classlibdap_1_1Structure.html Structure] objects and I left out the child objects of the Array class that determine the type of the array to emphasize the relationship between the variables and the attribute tables. Each of these 'type classes' is a child of the BaseType class and that class includes an [http://www.opendap.org/api/pref/html/classlibdap_1_1AttrTable.html AttrTable] (DAP attribute table) instance. Each AttrTable instance uses zero or more instances of the [http://www.opendap.org/api/pref/html/structlibdap_1_1AttrTable_1_1entry.html entry] class to hold actual DAP attribute values.

Note: The [http://www.opendap.org/api/pref/html/index.html online reference documentation for libdap], which provides all of these classes.

== Processing the NcML Elements ==

State diagram: [[Image:NcML_XML_Parsing_state_diagram_1.png|thumb|right|400px|A state diagram showing how to process the NcML elements]]
A [http://docs.opendap.org/images/1/1c/NcML_XML_Parsing_state_diagram_1.png high resolution] version of the NcML parsing state diagram.

The diagram to the right shows how the NcML elements are to be processed. Initially the ''&lt;netcdf&gt;'' element is processed and the target data source is read as the vale of the ''netcdf@location'' attribute. At the same time the ''readMetadta'' or ''explicit'' elements are read and the DDX fetched. If the ''explicit'' element is found, the the DAP attributes are all removed from the DDX's DDS and BaseType instances.

After processing the initial part of the NcML document, a sequence of ''variable'' and ''attribute'' elements are read. Each ''variable'' element updated the current variable. The NcML handler can maintain a pointer to the BaseType instance that corresponds to this variable. When ''attribute'' elements are processed they are applied to the 'current' BaseType instance.

The easiest way to traverse (and modify in the case of the AttrTAble and/or entry instances) is to use the class's iterator objects. For the AttrTable class, there are two different interfaces present, one which is older and uses names to find values and a newer one that uses C++ iterators. Use the iterator-based interface whenever possible.</text>
      <sha1>gzpk222idgvandciu858fvxm16xivdy</sha1>
    </revision>
  </page>
</mediawiki>
