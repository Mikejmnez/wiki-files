<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.11/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.11/ http://www.mediawiki.org/xml/export-0.11.xsd" version="0.11" xml:lang="en">
  <siteinfo>
    <sitename>OPeNDAP Documentation</sitename>
    <dbname>wikidb</dbname>
    <base>https://docs.opendap.org/index.php/Home</base>
    <generator>MediaWiki 1.38.4</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">OPeNDAP Documentation</namespace>
      <namespace key="5" case="first-letter">OPeNDAP Documentation talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>More about strings - passing strings to functions</title>
    <ns>0</ns>
    <id>1067</id>
    <revision>
      <id>13527</id>
      <timestamp>2024-02-22T23:26:00Z</timestamp>
      <contributor>
        <username>Jimg</username>
        <id>3</id>
      </contributor>
      <comment>Created page with "== Is it better to pass as a const reference, or by value and then use std::move()? ==  It depends.  Here's a concise explanation from Stack Overflow. There are three cases:    /* (0) */    Creature(const std::string &amp;name) : m_name{name} { }  A passed lvalue binds to name, then is copied into m_name.  A passed rvalue binds to name, then is copied into m_name.    /* (1) */    Creature(std::string name) : m_name{std::move(name)} { }  A passed lvalue is copied into name, t..."</comment>
      <origin>13527</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2765" sha1="hx6j5gq702exeyly7fqtt7e9dk2581t" xml:space="preserve">== Is it better to pass as a const reference, or by value and then use std::move()? ==

It depends.

Here's a concise explanation from Stack Overflow. There are three cases:

  /* (0) */ 
  Creature(const std::string &amp;name) : m_name{name} { }

A passed lvalue binds to name, then is copied into m_name.

A passed rvalue binds to name, then is copied into m_name.

  /* (1) */ 
  Creature(std::string name) : m_name{std::move(name)} { }

A passed lvalue is copied into name, then is moved into m_name.

A passed rvalue is moved into name, then is moved into m_name.

  /* (2) */ 
  Creature(const std::string &amp;name) : m_name{name} { }
  Creature(std::string &amp;&amp;rname) : m_name{std::move(rname)} { }

A passed lvalue binds to name, then is copied into m_name.

A passed rvalue binds to rname, then is moved into m_name.

As move operations are usually faster than copies, (1) is better than (0) if you pass a lot of temporaries. (2) is optimal in terms of copies/moves, but requires code repetition.

Source: https://stackoverflow.com/questions/51705967/advantages-of-pass-by-value-and-stdmove-over-pass-by-reference

== What is an ''lvalue''? What is an ''rvalue''? ==

;LValue: An lvalue refers to an expression that identifies a memory location and can be assigned a value. It essentially acts as a locator for data storage.

Key characteristics:
* Can appear on the left-hand side of an assignment operator (=).
* Represents a persistent object that exists beyond the evaluation of a single expression.

Examples:
* Variable names (e.g., x, name)
* Array elements (e.g., array[3])
* Member variables of objects (e.g., object.value)
* Function calls returning an lvalue reference (rare)

;RValue: An rvalue represents a value itself, but it doesn't have a memory location that can be directly assigned to. It provides the data for an assignment.

Key characteristics:
* Can appear on the right-hand side of an assignment operator (=).
* Represents a temporary value that exists only during the evaluation of an expression.

Examples:
* Literal values (e.g., 42, "hello")
* Arithmetic expressions (e.g., 2 + 3)
* Function calls that don't return an lvalue reference
* The result of certain operators (e.g., increment/decrement)

''Every expression in a program is either an lvalue or an rvalue.''

;Implicit conversions: In some cases, compilers can implicitly convert between lvalues and rvalues. For example, an lvalue can be converted to an rvalue when its value is used in an expression (e.g., x + 5).
;Modern languages: While the core concepts remain similar, some modern languages like C++ introduce additional categories like ''xvalues'' for handling move semantics and resource management.

Source: https://gemini.google.com/app/efaa1d88d284719d, with edits.</text>
      <sha1>hx6j5gq702exeyly7fqtt7e9dk2581t</sha1>
    </revision>
  </page>
</mediawiki>
