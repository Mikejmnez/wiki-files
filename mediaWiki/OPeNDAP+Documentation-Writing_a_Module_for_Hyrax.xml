<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.11/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.11/ http://www.mediawiki.org/xml/export-0.11.xsd" version="0.11" xml:lang="en">
  <siteinfo>
    <sitename>OPeNDAP Documentation</sitename>
    <dbname>wikidb</dbname>
    <base>https://docs.opendap.org/index.php/Home</base>
    <generator>MediaWiki 1.38.4</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">OPeNDAP Documentation</namespace>
      <namespace key="5" case="first-letter">OPeNDAP Documentation talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Writing a Module for Hyrax</title>
    <ns>0</ns>
    <id>846</id>
    <revision>
      <id>9432</id>
      <parentid>9430</parentid>
      <timestamp>2012-09-26T18:42:36Z</timestamp>
      <contributor>
        <username>Jimg</username>
        <id>3</id>
      </contributor>
      <comment>/* Here's how */</comment>
      <origin>9432</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4720" sha1="ika8ccvdzw0ru995rqzdrf0dfwh6qu9" xml:space="preserve">Other guides:
* [[Hyrax_-_Create_BES_Module]]
* [[Hyrax_-_Extending_BES_Module]]
* [[Hyrax_-_Example_BES_Modules]]

Autoconf documentation: http://www.gnu.org/savannah-checkouts/gnu/autoconf/manual/autoconf-2.69/html_node/index.html#Top

== Including the library ...==
It's often easiest for people building from source code if the data access API used by the handler is included in the source.

Support three options:
# using --enable-local-API
# using --with-API-prefix
# finding a copy installed on the build OS

=== Here's how ===
First, look to see if the ''configure'' was run with the ''--with-API'' option, then test for the ''--enable...'' option, and then test for a copy of the API library on the host. The first of those found is used; if none are found/given, it's a configuration error.

In the Makefile.am:
&lt;source lang="make"&gt;
# distclean should remove everything built by make or configure
distclean-local:
	cd gdal-1.9.1 &amp;&amp; make distclean &amp;&amp; rm -rf build

# Not nearly as clean as it could be, but this removes .svn directories
# in subdirs. This also cleans out the gdal library's binaries, without
# removing them from the 'real' directory
dist-hook:
	(cd $(top_distdir)/gdal-1.9.1 &amp;&amp; make clean &amp;&amp; rm -rf build)
	rm -rf `find $(distdir) -name .svn`
&lt;/source&gt;

In configure.ac:
&lt;source lang="sh"&gt;
# Which copy of GDAL should be used for the build?
GDAL_FOUND=

AC_ARG_WITH(gdal, AS_HELP_STRING([--with-gdal], [Use the copy of GDAL at this location]),
            with_gdal_prefix="$withval", with_gdal_prefix="")

if test -n "$with_gdal_prefix" -a -x $with_gdal_prefix/bin/gdal-config
then
    AC_MSG_NOTICE([Using $with_gdal_prefix as the GDAL prefix directory.])
    GDAL_LDFLAGS="`$with_gdal_prefix/bin/gdal-config --libs`"
    GDAL_CFLAGS="`$with_gdal_prefix/bin/gdal-config --cflags`"
    GDAL_FOUND="yes"
elif test -n "$with_gdal_prefix"
then
    AC_MSG_ERROR([You set the gdal-prefix directory to $with_gdal_prefix, but gdal-config is not there.])
fi

AC_ARG_ENABLE(local-gdal, AS_HELP_STRING([--enable-local-gdal], [Build and use the local copy of GDAL]) )

# if we are going to build our own copy of GDAL and the JASPER JPEG2000 library
# was built, be sure to include it here, too.
if test -n "$enable_local_gdal" -a "$enable_local_gdal" = "yes"
then
    AC_MSG_NOTICE([Building the local GDAL library.])
    jasper=
    if test "$JASPER_FOUND" = "yes"
    then
        AC_MSG_NOTICE([Building JASPER support in the GDAL library.])
        if test -n "$with_jasper_prefix"
        then
            jasper="--with-jasper=$with_jasper_prefix"
        else
           jasper="--with-jasper=jasper-1.900.1/build"
        fi
    fi
    gdal_prx=`pwd`/gdal-1.9.1/build
    if (cd gdal-1.9.1 &amp;&amp; ./configure --prefix=$gdal_prx --disable-shared $jasper &amp;&amp; make -j9 &amp;&amp; make install)
    then
        GDAL_LDFLAGS="-Lgdal-1.9.1/build/lib -lgdal"
        GDAL_CFLAGS="-Igdal-1.9.1/build/include"
        AC_SUBST([GDAL_LDFLAGS])
        AC_SUBST([GDAL_CFLAGS])
        GDAL_FOUND="yes"
    
        # AC_MSG_NOTICE(["GDAL_LDFLAGS status &gt;$GDAL_LDFLAGS&lt;"])
        # AC_MSG_NOTICE(["GDAL_CFLAGS status &gt;$GDAL_CFLAGS&lt;"])
    else
        AC_MSG_ERROR([I could not build GDAL.])
    fi
fi

if test -z "$GDAL_FOUND"
then
    AX_LIB_GDAL([1.7.2])
    if test ! -z "$GDAL_CFLAGS" -a ! -z "$GDAL_LDFLAGS"; then
        GDAL_FOUND="yes"
    fi
fi

if test -z "$GDAL_FOUND"
then
    AC_MSG_ERROR([I could not find GDAL.])
fi
&lt;/source&gt;

=== An alternative using Autoconf ===

&lt;source lang="sh"&gt;
# Save the configure arguments so we can pass them to any third_party
# libraries that we might run configure on (see
# third_party/Makefile.am). One downside of our strategy for shipping
# and building third_party libraries is that we can't expose options
# from nested third_party configure scripts.
CONFIGURE_ARGS="$ac_configure_args"
AC_SUBST(CONFIGURE_ARGS)

# Force configured third_party libraries (currently only libprocess)
# to only build a static library with position independent code so
# that we can produce a final shared library which includes everything
# necessary (and only install that).
ac_configure_args_pre="$ac_configure_args"
ac_configure_args_post="$ac_configure_args --enable-shared=no --with-pic"
ac_configure_args="$ac_configure_args_post"

# Make sure config.status doesn't get the changed configure arguments,
# so it can rerun configure in the root directory correctly. This is
# necessary for Makefile rules which would regenerate files (e.g.,
# 'Makefile') after configure.ac was updated.
AC_CONFIG_COMMANDS_PRE([ac_configure_args="$ac_configure_args_pre"])
AC_CONFIG_COMMANDS_POST([ac_configure_args="$ac_configure_args_post"])

AC_CONFIG_SUBDIRS([third_party/libprocess])
&lt;/source&gt;</text>
      <sha1>ika8ccvdzw0ru995rqzdrf0dfwh6qu9</sha1>
    </revision>
  </page>
</mediawiki>
