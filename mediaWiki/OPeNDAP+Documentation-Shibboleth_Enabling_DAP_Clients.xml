<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.11/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.11/ http://www.mediawiki.org/xml/export-0.11.xsd" version="0.11" xml:lang="en">
  <siteinfo>
    <sitename>OPeNDAP Documentation</sitename>
    <dbname>wikidb</dbname>
    <base>https://docs.opendap.org/index.php/Home</base>
    <generator>MediaWiki 1.38.4</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">OPeNDAP Documentation</namespace>
      <namespace key="5" case="first-letter">OPeNDAP Documentation talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Shibboleth Enabling DAP Clients</title>
    <ns>0</ns>
    <id>959</id>
    <revision>
      <id>11843</id>
      <parentid>11842</parentid>
      <timestamp>2015-05-01T19:44:53Z</timestamp>
      <contributor>
        <username>Jimg</username>
        <id>3</id>
      </contributor>
      <minor/>
      <comment>/* The Fix */</comment>
      <origin>11843</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5865" sha1="25xwk1uzsewlf18x0hcbddfxvhuz4ve" xml:space="preserve">== Overview ==
Most DAP clients are capable of dealing with HTTP BASIC Authentication situations. However, Shibboleth presents a particular challenge because it does not adhere to regular HTTP behavior in that it doesn't challenge the clients with a returned 401 status when a requested resource requires authentication for access. Rather, Shibboleth initiates a series of 302 redirects that take the client to an authentication web form which is returned with a status of 200. And even if the client insists on presenting its credentials to Shibboleth using HTTP BAsic authentication this effort will be ignored.

== The Fix ==

The way to enable a client to work with Shibboleth require that both the Shibboleth Service Provider (SP) and Identity Provider (IdP) have enabled the [https://wiki.shibboleth.net/confluence/display/SHIB2/ECP Enhanced Client or Proxy (ECP) profile]. The ECP profile was intended to provide Shibboleth authentication access for non-browser clients.

=== Basic modifications to OpenDAP clients ===
Since the client may never know when it will encounter a Shibboleth protected resource it must indicate with '''every''' request that it is capable of engaging the server in the ECP profile exchange. This is done by including the mime type &lt;tt&gt;''application/vnd.paos+xml''&lt;/tt&gt; in the &lt;tt&gt;''Accept''&lt;/tt&gt; header and by including the &lt;tt&gt;''PAOS''&lt;/tt&gt; header. For a client that is requesting a netcdf-3 response for a DAP resource the request headers would include:

&lt;source lang="apache"&gt;
Accept: application/x-netcdf; application/vnd.paos+xml
PAOS: ver="urn:liberty:paos:2003-08";"urn:oasis:names:tc:SAML:2.0:profiles:SSO:ecp"
&lt;/source&gt;

When the requested resource is protected by Shibboleth this will cause the server to initiate the ECP profile flow by returning a document with the &lt;tt&gt;''Content-Type''&lt;/tt&gt; header set to &lt;tt&gt;''application/vnd.paos+xml''&lt;/tt&gt; which indicates to the client that it needs to process the response as a Shibboleth ECP profile exchange.

===== Cookies =====
In addition to including the information in the ''Accept'' and ''PAOS'' headers as described above, clients should be configured to use ''HTTP Cookies''. 

===== Summary =====
In summary, to support Shibboleth, an OpenDAP client should include the two headers shown above in every out-bound request and be prepared to process an 'ECP profile' exchange as the result of every response - similar to the way OpenDAP clients must detect error responses that may come back from any request. Clients should also support HTTP Cookies.

=== Details ===
The details of the exchange are described briefly on the Shibboleth wiki here: https://wiki.shibboleth.net/confluence/display/CONCEPT/ECP and in the specification of the ECP profile exchange here: http://docs.oasis-open.org/security/saml/Post2.0/saml-ecp/v2.0/cs01/. Also, a sample bash shell program that utilizes curl to perform the access and authentication exchange can be found here: https://wiki.shibboleth.net/confluence/download/attachments/4358416/ecp.sh?api=v2

===== Overview of the processing steps =====
When a client receives a response that indicates it must authenticate using Shibboleth (''Content-Type:'' set to ''application/vnd.paos+xml''), it must follow this basic flow:
# Save off the response location provided by the Service Provider (SP) in a SOAP header, as well as optional RelayState.
# Check for an optional set of "supported IdPs" from the SP in a SOAP header, filtered against IdP(s) the client supports.
# Route the SOAP body from the SP to the IdP along with the user's credentials
:: Make sure to strongly verify the IdP's identity while doing so.
# Compare the response location provided by the IdP in a SOAP header.
:: It is an error for these to not match
# Route the SOAP body from the IdP back to the SP, along with any RelayState information saved from earlier.
# Check for a HTTP 200 or 302 response from the SP, indicating success or a redirect to the original resource. 
:: You can follow a redirect, or simply preserve the original request from the beginning of the process internally and replay it.
In practice this means that for steps 1 and 5, a SOAP response must be parsed by the client and some information must be extracted. That information, an XML fragment, is then used as part of a HTTP POST in order to get to the subsequent step. In this example, the processing is done using ''sed'' in a [https://wiki.shibboleth.net/confluence/download/attachments/4358416/ecp.sh?api=v2 Bash script]. Also note that [https://wiki.shibboleth.net/confluence/download/attachments/4358416/ecp.py?api=v2 the python script] is also a very readable example.

== Conclusion ==
One important difference between Shibboleth, URS/OAuth2 and HTTP/S Basic authentication backed by an LDAP server, is that the latter two work seamlessly (or for the most part, seamlessly) with common HTTP implementations. If the HTTP libraries are configured correctly to process redirects and handle authentication challenges, then those two authentication schemes will work fine. In particular, the client software using HTTP libraries will likely never know that an authentication step took place, meaning that they won't have to be modified to use OpenDAP servers that require credentials. Or, if they are modified, it's likely only to correctly support existing HTTP features. 

However, current HTTP libraries don't provide support for Shibboleth and so the clients must fill the void. This means that OpenDAP client software must be modified to perform the extra processing steps for Shibboleth authentication, especially the steps involving SOAP messages. These extra processing steps could be encoded in some of the OpenDAP library software, relieving much of the burden on application developers, but as is the case with the HTTP libraries (e.g., libcurl), that has yet to happen.</text>
      <sha1>25xwk1uzsewlf18x0hcbddfxvhuz4ve</sha1>
    </revision>
  </page>
</mediawiki>
