<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.11/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.11/ http://www.mediawiki.org/xml/export-0.11.xsd" version="0.11" xml:lang="en">
  <siteinfo>
    <sitename>OPeNDAP Documentation</sitename>
    <dbname>wikidb</dbname>
    <base>https://docs.opendap.org/index.php/Home</base>
    <generator>MediaWiki 1.38.4</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">OPeNDAP Documentation</namespace>
      <namespace key="5" case="first-letter">OPeNDAP Documentation talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>DAP4: Proposal for Keys in Sequences</title>
    <ns>0</ns>
    <id>813</id>
    <revision>
      <id>8277</id>
      <parentid>8271</parentid>
      <timestamp>2012-05-30T22:04:23Z</timestamp>
      <contributor>
        <username>JohnCaron</username>
        <id>14</id>
      </contributor>
      <comment>/* Discussion */</comment>
      <origin>8277</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4402" sha1="0fr3r36q6x819srcvtn3qxoz77ovlbb" xml:space="preserve">[[Category:Development|Development]][[Category:DAP4|DAP4]]
[[OPULS_Development| &lt;&lt; Back to OPULS Development]]

==Background==
John Caron has argued that supporting nested sequences is desirable because it provides a natural representation for certain datasets such as trajectories of trajectories. This is an important insight, and it should be supported in some form.

The key point is that we have a sequence with one or more fields that are themselves sequences. Consider this example.
&lt;font size="2"&gt;
&lt;source lang="xml"&gt;
&lt;Sequence name="SQ1"&gt;
  &lt;Int32 name="f1"/&gt;
  &lt;Float32 name="fx"/&gt;
  &lt;Sequence name="SQ2"&gt;
    &lt;Float32 name="fy"/&gt;
    ...
  &lt;/Sequence&gt;
&lt;/Sequence&gt;
&lt;/source&gt;
&lt;/font&gt;

There is an implicit join column that connects an instance of SQ1 with an instance of SQ2. Asking for field e.g. SQ1.SQ2.fy in effect joins SQ1 and SQ2 on some unnamed, untyped field/column (or columns) common to both and then projects out column SQ2.fy. Without some kind of syntactic addition, there is actually no way to explicitly get the join column(s) of SQ1 or SQ2.

One question is: if we request the server  for SQ1.SQ2.fy, what is returned by the server? To be consistent with, for example, the request for SQ1.f1, what must be returned is a sequence of records from SQ1 with a field, SQ2, that is itself a sequence of records from SQ2. This tends to be a fairly complex data structure.

==Proposal==
I propose to support nested sequences using Sequence/relation flattening combined with concepts of keys and foreign keys. The trade-off becomes a complex data structure for nested relations versus a somewhat more complex query plus additional work on the client side. 

Consider this example.
&lt;font size="2"&gt;
&lt;source lang="xml"&gt;
&lt;Sequence name="SQ1"&gt;
  &lt;Key name="f1" type="Int32"/&gt;
  &lt;Float32 name="fx"/&gt;
  ...
&lt;/Sequence&gt;
&lt;Sequence name="SQ2"&gt;
  &lt;ForeignKey key="/SQ1.f1"/&gt;
  &lt;Float32 name="fy"/&gt;
  ...
&lt;/Sequence&gt;
&lt;/source&gt;
&lt;/font&gt;
This approach is a direct representation of the idea of a foreign key as defined in traditional relational database theory.
It specifically indicates how two Sequences can be combined (effectively using join) based on the ForeignKey element in one Sequence pointing to a Key element in another Sequence.

The &lt;Key&gt; element in the example in SQ1 is equivalent to the following field.
&lt;Int32 name="f1"/&gt; as far as its role as a field in the Sequence.

We might also consider this alternative form.
&lt;font size="2"&gt;
&lt;source lang="xml"&gt;&lt;Int32 name="f1" key="true"/&gt;&lt;/source&gt;
&lt;/font&gt;
Here the "keyness" is indicated by an XML attriute versus a &lt;Key&gt; element.

In either case, other Sequences can refer to that key using a &lt;ForeignKey&gt; element.

As far as fields go, defining a foreign key implicitly includes the key being referenced (f1 in our example) as a field in the Sequence.

So, the above example is equivalent to the following.
&lt;font size="2"&gt;
&lt;source lang="xml"&gt;
&lt;Sequence name="SQ1"&gt;
  &lt;Int32 name="f1"/&gt;
  &lt;Float32 name="fx"/&gt;
  ...
&lt;/Sequence&gt;
&lt;Sequence name="SQ2"&gt;
  &lt;Int32 name="f1"/&gt;
  &lt;Float32 name="fy"/&gt;
  ...
&lt;/Sequence&gt;
&lt;/source&gt;
&lt;/font&gt;

Once we have keys and foreign keys, it is easy to represent two Sequences as if they were a nested Sequence. So, our example above could be presented to a user as the following equivalent nested Sequence.
&lt;font size="2"&gt;
&lt;source lang="xml"&gt;
&lt;Sequence name="SQ1"&gt;
  &lt;Int32 name="f1"/&gt;
  &lt;Sequence name="SQ2"&gt;
    &lt;Int32 name="fy"/&gt;
  &lt;/Sequence&gt;
&lt;/Sequence&gt;
&lt;/Sequence&gt;
&lt;/source&gt;
&lt;/font&gt;
Note that the common key field (f1) only appears in the outer Sequence because its existence with the same value is implicit in the nesting.

==Rationale==
This proposal keeps the data model simple, while still allowing client code to present the appearance of a nested sequence to the user.

==Discussion==
[[User:dmh|Dennis]] I am having second thoughts about how to support nested relations. The problem is not with the key idea, but rather how to generate a query to simulate a query against nested relations. If one actually supported nested relations in the model, then a query could be done with a single query. With the relations flattened, it requires two queries: one against each relation. This is both confusing and more complex than is desirable.

[[User:dmh|Dennis]]

Yes, i was wondering the same. Can you give examples of what the quesries look like?

[[User:JohnCaron|JohnCaron]] 15:04, 30 May 2012 (PDT)</text>
      <sha1>0fr3r36q6x819srcvtn3qxoz77ovlbb</sha1>
    </revision>
  </page>
</mediawiki>
