<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.11/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.11/ http://www.mediawiki.org/xml/export-0.11.xsd" version="0.11" xml:lang="en">
  <siteinfo>
    <sitename>OPeNDAP Documentation</sitename>
    <dbname>wikidb</dbname>
    <base>https://docs.opendap.org/index.php/Home</base>
    <generator>MediaWiki 1.38.4</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">OPeNDAP Documentation</namespace>
      <namespace key="5" case="first-letter">OPeNDAP Documentation talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>ProgrammerGuideChapter2</title>
    <ns>0</ns>
    <id>189</id>
    <revision>
      <id>1829</id>
      <parentid>1828</parentid>
      <timestamp>2008-01-26T11:15:57Z</timestamp>
      <contributor>
        <username>Yuan</username>
        <id>8</id>
      </contributor>
      <comment>/* Connections */</comment>
      <origin>1829</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4684" sha1="5s0jg6kf20msppumzkeb3qeqehtx84x" xml:space="preserve">=Managing Connections=


Because OPeNDAP uses a communication protocol (http) that does not
maintain state information about the link between two processes, these
connections are virtual, and all the information about them is
maintainted by the client.  The toolkit contains two classes to help
clients manage connections to one or more OPeNDAP servers.  One class,
Connect stores information used when a connection is
established. It also allows a program to provide local access to data
(without a OPeNDAP data server).

The second network class of the OPeNDAP Toolkit, Connections,
manages instances of the Connect class. It provides a
mechanism for the client libraries to pass back to user programs the
type of object (such as &lt;font color='green'&gt;int&lt;/font&gt;, opaque pointer, dots) they expect and then to use one of those objects to access the correct instance of
Connect .  Connections is a template class. That is, a client library uses the Connections class to make an array of some sub-class of Connect.



==Connect==


The Connect class manages one connection to either a remote
data set, via a OPeNDAP data server, or a local access. For each data set
or file that the user program opens, there must be exactly one
instance of Connect. Because information needed for local
access is stored in an instance of Connect, this class may
also be used (sub-classed) for each client API that needs to maintain
additional information about the connection.\footnote{For example, the

subclasses JGConnect  and  NCConnect exist for JGOFS and

NetCDF, respectively.}. In the API-specific child of Connect
additional members can be added to store state information that the
client-library needs to maintain the virtual connection (See
Section~(tk,subclass-netio) for more information on making
virtual connections).

&lt;center&gt;

[[Image:Connect.gif|actual size]] 

The Connect Class

&lt;/center&gt;

 

The Connect class is illustrated in [[:Image:Connect.gif|figure 2.1]].  These objects contain the following information:

 
; URL : The URL with which the client library opens the connection with the OPeNDAP server.

; DDS  : The  DDS of the opened dataset.  This must be retrieved from the dataset.

; DAS  : The  DAS of the opened dataset.  This must be retrieved from the dataset.

; Gui  : The  Gui object indicates a graphical widget on the client platform that displays information about the data transfer in progress.

; Error  : The  Error object contains information used to help the client process an error message from the server.

 


The Connect class provides member functions to get the dataset's DAS ,  DDS and data. The instance of Connect  (or a subclass of  Connect) stores the URL as the user provides it.

When the client library receives a URL via its "open" call (which
will not actually be called &lt;font color='green'&gt;open&lt;/font&gt; but performs the function of opening a file or data set; e.g., NetCDF's &lt;font color='green'&gt;ncopen&lt;/font&gt;) it passes that URL to the Connect member functions like &lt;font color='green'&gt;request_das&lt;/font&gt; and &lt;font color='green'&gt;request_dds&lt;/font&gt;. These member functions append an appropriate extension (&lt;font color='green'&gt;.das&lt;/font&gt; and &lt;font color='green'&gt;.dds&lt;/font&gt;, for example) onto the URL and retrieve the resulting information from the server, the DAS  or  DDS for the dataset.

If you are re-implementing an API and must support function calls that
modify how data is accessed (e.g., by creating array slices or by
choosing one of a set of variables), then you will need to translate
those requests into a OPeNDAP constraint expression. You would then pass
these synthesized constraint expressions to the
&lt;font color='green'&gt;Connect::request_data&lt;/font&gt; member function.  (See
[[ProgrammerGuideChapter4|Section 4.3]] for more information about constraint
expressions.)

The specialized version of Connect is the place to put state
information needed by a recoded API or other client.  This can be
used, for example, to emulate an API that maintains a list of open
files.

==Connections==


The class Connections is used to manage a set of instances of
the class Connect by providing a means to map an index or
opaque pointer to an instance of Connect.

When a new instance of Connect (or a descendent of Connect; See [[ProgrammerGuideChapter3|Section 3.2]]) is created, it is added to the Connections object using the &lt;font color='green'&gt;add_connect&lt;/font&gt; member function. &lt;font color='green'&gt;add_connect&lt;/font&gt; returns an integer that can be
used to access that instance of Connect at any time. Similarly, when
an instance of Connect is to be deleted, the object can be
referred to via the Connections object and this index.</text>
      <sha1>5s0jg6kf20msppumzkeb3qeqehtx84x</sha1>
    </revision>
  </page>
</mediawiki>
